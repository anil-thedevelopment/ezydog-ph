<style>
  .red-text {
    color: #ea2d24;
    font-weight: 700;
  }
  @media only screen and (max-width: 767px){
    .dsk-notice{
      display: none;
    }
  }
  @media only screen and (min-width: 768px){
    .mbl-notice{
      display: none;
    }
  }
</style>	

{% if product.variants.size > 0 %}
  {% assign mainproduct_id = product.variants.first.id %}
  {% assign product_price = product.variants.first.price | money %}
{% else %}
  {% assign mainproduct_id = product.id %}
  {% assign product_price = product.price | money %}
{% endif %}

{% assign simple_bundle = product.metafields.custom.simple_bundle_product_step.value %}
{% if simple_bundle %}
  {% assign productsmain_array = '' %}
  {% assign existing_ids = '' %}
  <div id="bundle-apps-ezy" class="personalized-bundle-sections accordion cl-accordion-label-customise group">
    {% for simplebundle in simple_bundle %}
      {% assign option_heading = simplebundle.option_display.value %}
      {% assign option_subheading = simplebundle.option_display_sub_heading.value %}
      {% assign option_product_add = simplebundle.option_product_add.value %}
      {% assign single_product_add = simplebundle.single_product_add.value %}
      {% assign product_variant = simplebundle.product_variant.value %}

      {% if product_variant %}
        {% assign array_bundleoption = '' %}
        {% assign array_bundleoptionsizes = '' %}

        {% for variant_option in product_variant %}
          {% if variant_option.featured_image.product_id %}
            {% assign product_id = variant_option.featured_image.product_id %}
          {% else %}
            {% assign product_id = variant_option.product.id %}
          {% endif %}
          {% assign color_downcase = variant_option.option1 | downcase %}
          {% assign option_headingv = option_heading | downcase | replace: ' ', '-' %}
          {% assign size_downcase = variant_option.option2 %}
          {%- assign combined_value_color = '"' | append: option_headingv | append: '_' | append: product_id | append: '_' | append: color_downcase | append: '_' | append: size_downcase | append: '"' -%}
          {%- assign combined_value_sizes = '"' | append: option_headingv | append: '_' | append: product_id | append: '_' | append: size_downcase | append: '_' | append: color_downcase | append: '"' -%}

          {% if forloop.last %}
            {% assign array_bundleoption = array_bundleoption | append: combined_value_color %}
            {% assign array_bundleoptionsizes = array_bundleoptionsizes | append: combined_value_sizes %}
          {% else %}
            {% assign array_bundleoption = array_bundleoption | append: combined_value_color | append: ',' %}
            {% assign array_bundleoptionsizes = array_bundleoptionsizes | append: combined_value_sizes | append: ',' %}
          {% endif %}
        {% endfor %}

        {% assign array_bundleoption_main = array_bundleoption_main | append: array_bundleoption | append: ',' %}
        {% assign array_bundleoption_main_sizes = array_bundleoption_main_sizes | append: array_bundleoptionsizes | append: ',' %}
      {% endif %}
      <div
        id="{% if forloop.index ==1 %}personalized-bundle-option{% else %}simple-bundles-options{% endif %}"
        class="{{ option_heading | downcase | replace: ' ', '-' }} {% if single_product_add %} {% else %}bundle-template-option{% endif %}"
      >
        <h3 class="heading">{{ option_heading }}</h3>
        {% if single_product_add %}
          <div
            class="crard-show_single-product row"
            id="crard-show_single-product"
            data-id="{{ single_product_add.variants[0].id }}"
            data-prices="{{ single_product_add.variants[0].price | money }}"
          >
            <div class="container">
              <div class="col-first">
                <figure>
                  <img
                    id="image-product"
                    src="{{ single_product_add.featured_image.src | img_url: 'master' }}"
                    width="100px"
                    height="100px"
                  >
                </figure>
              </div>
              <div class="col-second">
                <h3>{{ single_product_add.title }}</h3>
                <span class="color-p">{{ single_product_add.variants[0].title }}</span>
              </div>
            </div>
          </div>
          {% break %}
        {% endif %}
        <label for="harness" class="label">{{ option_subheading }}</label>
        <details class="accordion cl-accordion-label-customise group" is="accordion-disclosure" aria-expanded="false">
          <summary class="cl-accordion-summary">
            <div id="label-select-image-box"></div>
            <span id="label-select-text" class="Barlow-Medium dfs-16 mfs-20">Choose Product</span>
            <svg
              aria-hidden="true"
              focusable="false"
              fill="none"
              width="10"
              class="group-expanded:rotate icon icon-chevron-down"
              viewBox="0 0 10 10"
            >
              <path d="m1 3 4 4 4-4" stroke="currentColor" stroke-linecap="square"></path>
            </svg>
          </summary>
          <div
            class="accordion__content cl-accordion__content Open-Sans"
            style="opacity: 1; transform: translateY(0px);"
          >
            {% assign products_array = '' %}

            {% for product_list in option_product_add %}
              {% assign personalise_label = product_list.metafields.custom.personalise_label.value %}
              {% if personalise_label %} {% assign status = true %} {% else %} {% assign status = false %} {% endif %}

              {%- assign product_title = product_list.title -%}
              {%- assign product_id = product_list.id -%}
              {%- assign product_handle = product_list.handle -%}
              {%- assign product_vendor = product_list.vendor -%}
              {%- assign product_type = product_list.type -%}
              {%- assign product_tags = product_list.tags -%}
              {%- assign product_price = product_list.price -%}
              {%- assign product_featuresimages = product_list.featured_image | img_url: 'master' -%}
              {%- assign variants_array = '' -%}
              {%- assign variant_ids = '' -%}
              {%- for variant in product_list.variants -%}
                {%- assign variant_id = variant.id -%}

                {% unless variant_ids contains variant_id %}
                  {%- assign variant_title = variant.title -%}
                  {%- assign variant_price = variant.price -%}
                  {%- assign variant_available = variant.available -%}

                  {% if variant.featured_image.src %}
                    {%- assign variant_image = variant.featured_image.src | img_url: 'master' -%}
                  {% else %}
                    {%- assign variant_image = variant.product.featured_image | img_url: 'master' -%}
                  {% endif %}
                  {%- assign variant_option_one = variant.option1 | downcase -%}
                  {%- assign variant_option_two = variant.option2 -%}
                  {%- assign variant_serialized = '("id"%' | append: variant_id | append: ', "handle_new"%"' | append: variant.handle | append: ', "title"%"' | append: variant_title | append: '", "price"%' | append: variant_price | append: '", "available"%' | append: variant_available | append: ', "vareint_image"%"' | append: variant_image | append: ', "option_one"%"' | append: variant_option_one | append: ', "option_two"%"' | append: variant_option_two | append: '")' -%}

                  {% if variants_array == '' %}
                    {% assign variants_array = variant_serialized %}
                  {% else %}
                    {% assign variants_array = variants_array | append: '=' | append: variant_serialized %}
                  {% endif %}

                  {%- assign variant_ids = variant_ids | append: variant_id | append: ',' -%}
                {%- endunless -%}
              {%- endfor -%}

              {%- assign variants_array = '[' | append: variants_array | append: ']' -%}
              {%- assign product_serialized = '{"id":' | append: product_id | append: '--"handle_new":"' | append: product_handle | append: '--"title":"' | append: product_title | append: '--"price":' | append: product_price | append: '--"featured_image":"' | append: product_featuresimages | append: '--"variants":' | append: variants_array | append: '}' -%}
              {% assign existing_ids = existing_ids | append: product_id | append: ',' %}

              <div
                class="cl-product-select-{{ status }} cl-product-select product-select-{{ product_id }}"
                data-pdid="{{ product_id }}"
              >
                <label for="cl-product-checkbox-{{ product_id }}" class="cl-checkbox-container">
                  <img
                    height="64px"
                    width="64px"
                    class="cl-product-image"
                    src="{{ product_featuresimages }}"
                    alt="{{ product_title }}"
                  >
                  <span class="Barlow-Medium dfs-14 mfs-14 {{ option_heading | capitalize | replace: ' ', '-' }}">{{ product_title }}</span>
                </label>
              </div>
              {% if products_array == '' %}
                {% assign products_array = products_array | append: product_serialized %}
              {% else %}
                {% assign products_array = products_array | append: ',' | append: product_serialized %}
              {% endif %}

              {% assign sibling_handles = product_list.metafields.custom.product_sibling.value %}
              {%- if sibling_handles -%}
                {% for handle in sibling_handles %}
                  {% assign id_handle = handle.id %}
                  {% assign fabractions = handle.metafields.custom.fabrication.value.name %}
                  {% assign fabractions_img = handle.metafields.custom.fabrication.value.image | img_url: 'master' %}
                  {% assign price_handle = handle.price %}
                  {% assign title_handle = handle.title %}
                  {% assign product_image = handle.featured_image | img_url: 'master' %}
                  {% assign prodcut_varients = handle.variants %}
                  {% assign variants_array_fab = '' %}
                  {%- for variantss in prodcut_varients -%}
                    {%- assign variant_ids = variantss.id -%}
                    {%- assign variant_titles = variantss.title -%}
                    {%- assign variant_prices = variantss.price -%}
                    {%- assign variant_availables = variantss.available -%}
                    {% if variantss.featured_image.src %}
                      {%- assign variant_image = variantss.featured_image.src | img_url: 'master' -%}
                    {% else %}
                      {%- assign variant_image = variantss.product.featured_image | img_url: 'master' -%}
                    {% endif %}
                    {%- assign variant_option_ones = variantss.option1 | downcase -%}
                    {%- assign variant_option_twos = variantss.option2 -%}
                    {%- assign variant_serialized_fab = '("id"%' | append: variant_ids | append: ', "title"%"' | append: variant_titles | append: ', "handle_new"%"' | append: variantss.handle | append: '", "price"%' | append: variant_prices | append: '", "available"%' | append: variant_availables | append: ', "vareint_image"%"' | append: variant_image | append: ', "option_one"%"' | append: variant_option_ones | append: ', "option_two"%"' | append: variant_option_twos | append: '")' -%}

                    {% if variants_array_fab == '' %}
                      {% assign variants_array_fab = variant_serialized_fab %}
                    {% else %}
                      {% assign variants_array_fab = variants_array_fab | append: '=' | append: variant_serialized_fab %}
                    {% endif %}
                  {%- endfor -%}
                  {%- assign variants_array_fab = '[' | append: variants_array_fab | append: ']' -%}
                  {%- assign product_fabirication = '{"id":' | append: id_handle | append: '--"title":"' | append: title_handle | append: '--"handle_new":"' | append: handle.handle | append: '--"price":' | append: price_handle | append: '--"featured_image":"' | append: product_image | append: '--"variants":' | append: variants_array_fab | append: '}' -%}

                  {% unless existing_ids contains id_handle %}
                    {% assign products_array = products_array | append: ',' | append: product_fabirication %}
                    {% assign existing_ids = existing_ids | append: id_handle | append: ',' %}
                  {% endunless %}
                {% endfor %}
              {%- endif -%}
            {% endfor %}
            {% assign products_array = products_array %}
            {% if productsmain_array == '' %}
              {% assign productsmain_array = productsmain_array | append: products_array %}
            {% else %}
              {% assign productsmain_array = productsmain_array | append: ',' | append: products_array %}
            {% endif %}
          </div>
        </details>
      </div>
    {% endfor %}

    <div class="buy-button-wrapper-simplebundle" style="padding-top:20px;">
      <buy-buttons class="buy-buttons-simplebundle">
        <button
          id="product-disables-button-simplebundle"
          type="submit"
          class="button w-full"
          style="background-color: #939598;border-color: #939598;--button-text-color: 255 255 255;"
          disabled
        >
          Add to cart
        </button>
      </buy-buttons>
      <div class="buy-button-wishlist">
        <div id="smartwishlist" data-product="{{ product.id }}" data-variant="{{ product.variants.first.id }}"></div>
      </div>
    </div>
  </div>

  {% assign productsmain_array = productsmain_array | replace: '},{', '}|{' %}
  {% assign productsmain_array = productsmain_array | split: '|' %}

  <script>
    document.addEventListener('click', (event) => {
      if (event.target.closest('.header__nav-icon.icon.icon-cart') || 
          event.target.closest('.quantity-selector__button')) {
        
        event.preventDefault();

        const cartDrawer = document.querySelector('#cart-drawer');
        fetch('/cart', { headers: { 'Accept': 'text/html' } })
          .then(response => response.text())
          .then(() => {
            cartDrawer.dispatchEvent(new CustomEvent('cart:refresh', { bubbles: true }));
          })
          .catch(error => console.error('Error reloading cart drawer:', error));
      }
    });

    document.addEventListener('DOMContentLoaded', function () {
      // Explicitly set initial price to $0.00
      if ($('sale-price span#product-price').length) {
        $('sale-price span#product-price').text('$0.00');
        $('sale-price').text('$0.00');
      } else {
        console.warn('sale-price element not found');
      }

      if ($('compare-at-price').length) {
        $('compare-at-price').text('$0.00');
      } else {
        console.warn('compare-at-price element not found');
      }

      // Initialize price display with first available variant
      updateBundlePriceDisplay();

      // Select all accordion elements
      $(document).on('click', '.card-close-button-personalised', function(event) {
        $(this).parent().remove();
        $('.crard-show-personalized').remove();
        const $simpleclasselement = $(this).attr('data-class_element');
        const $simpleBundleButton = $('.buy-buttons-simplebundle button');
        $('.'+$simpleclasselement).find('span#label-select-text').text('Choose Product');
        $simpleBundleButton
          .attr('id', 'product-disables-button-simplebundle')
          .attr('disabled', true)
          .css({ 'background-color': '#939598', 'border-color': '#939598' });
        updateBundlePriceDisplay();
      });

      $(document).on('click', '.card-close-button', function(event) {
        $(this).parent().remove();
        const $simpleclasselement = $(this).attr('data-class_element');
        const $simpleBundleButton = $('.buy-buttons-simplebundle button');
        $('.'+$simpleclasselement).find('span#label-select-text').text('Choose Product');
        $simpleBundleButton
          .attr('id', 'product-disables-button-simplebundle')
          .attr('disabled', true)
          .css({ 'background-color': '#939598', 'border-color': '#939598' });
        updateBundlePriceDisplay();
      });

      $personalizedVariantsr = [
        {% for variant in all_products[personalisedproduct].variants %}
          {{ variant | json }}{% unless forloop.last %},{% endunless %}
        {% endfor %}
      ];

      {% assign filtered_products = collections.all.products %}
      let products_new = {
        {% for productsmain_item in productsmain_array %}
          {% assign productsmain_items = productsmain_item | replace: '{', '' | replace: '}', '' %}
          {% assign productsmain_itemss = productsmain_items | split: '--' %}
          {% for productsmain_itemsss in productsmain_itemss %}
            {% assign productsmain_itemssss = productsmain_itemsss | replace: '"', '' | split: ':' %}
            {% if productsmain_itemssss[0] == 'id' %}
              {% assign id_tert = productsmain_itemssss[1] %}
            {% endif %}
            {% if productsmain_itemssss[0] == 'title' %}
              {% assign title_tesr = productsmain_itemssss[1] %}
            {% endif %}
            {% if productsmain_itemssss[0] == 'price' %}
              {% assign price_tert = productsmain_itemssss[1] %}
            {% endif %}
            {% if productsmain_itemssss[0] == 'featured_image' %}
              {% assign featured_imagefgt = productsmain_itemssss[1] %}
            {% endif %}
            {% if productsmain_itemssss[0] == 'handle_new' %}
              {% assign handle = productsmain_itemssss[1] %}
            {% endif %}
            {% assign product_obj = all_products[handle] %}
            {% assign personalise_label = product_obj.metafields.custom.personalise_label.value %}
            {% if personalise_label %} {% assign status=true %} {% else %} {% assign status=false %} {% endif %}
          {% endfor %}
          "{{ id_tert }}": {
            "product_id": "{{ id_tert }}",
            "product_title": "{{ title_tesr }}",
            "product_image": "{{ featured_imagefgt }}",
            "product_price": "{{ price_tert | money }}",
            "personalise_label": {{ status }},
            "product_variants": [
              {% if productsmain_itemssss[0] == 'variants' %}
                {% assign variants_pro = productsmain_itemssss[1] | replace: '[', '' | replace: ']', '' | split: '=' %}
                {% assign variant_ids = '' %}
                {% for variantddd in variants_pro %}
                  {% assign variant_coma = variantddd | replace: '(', '' | replace: ')', '' | split: ',' %}
                  {% for variant_comas in variant_coma %}
                    {% assign variant_data = variant_comas | split: '%' %}
                    {% if variant_data[0] == 'id' %}{% assign id_v=variant_data[1] %}{% endif %}
                    {% if variant_data[0] == ' title' %}{% assign title_v=variant_data[1] %}{% endif %}
                    {% if variant_data[0] == ' vareint_image' %}{% assign image_v=variant_data[1] %}{% endif %}
                    {% if variant_data[0] == ' available' %}{% assign available_v=variant_data[1] %}{% endif %}
                    {% if variant_data[0] == ' price' %}{% assign price_v=variant_data[1] %}{% endif %}
                    {% if variant_data[0] == ' option_one' %}{% assign option_one_v=variant_data[1] %}{% endif %}
                    {% if variant_data[0] == ' option_two' %}{% assign option_two_v=variant_data[1] %}{% endif %}
                    {% assign variant_data = title_v | split: " / " %}
                    {% assign variant_data_0 = variant_data[0] | downcase | strip %}
                    {% assign variant_data_1 = variant_data[1] | strip %}
                  {% endfor %}
                  {% unless variant_ids contains id_v %}
                    {
                      "variant_id": "{{id_v }}",
                      "variant_title": "{{ title_v }}",
                      "variant_price": "{{ price_v | money }}",
                      "variant_inventory": "1",
                      "variant_image": "{{ image_v }}",
                      "option_1": "{{ variant_data_0 }}",
                      "option_2": "{{ variant_data_1 }}",
                      "available": {{ available_v }}
                    }{% unless forloop.last %},{% endunless %}
                    {% assign variant_ids = variant_ids | append: id_v | append: ',' %}
                  {% endunless %}
                {% endfor %}
              {% endif %}
            ],
            "image_varients": {
              {% assign product_obj = all_products[handle] %}
              {% if product_obj != blank %}
                {% assign image_overlay_obj = product_obj.metafields.custom.custom_overlay_images %}
                {% for image_overlay_list in image_overlay_obj.value %}
                  {% assign image_url = image_overlay_list | img_url: 'master' %}
                  {% assign image_url_clean = image_url | split: '?' | first %}
                  {% assign image_name = image_url_clean | split: '/' | last %}
                  {% assign image_name = image_name | split: '.' | first %}
                  {% assign image_name = image_name | split: '---' | last %}
                  {% if image_name contains '_' %}
                    {% assign image_name = image_name | split: '_' | first %}
                  {% endif %}
                  "image_url_{{ forloop.index }}": {
                    image_url: "{{ image_url }}",
                    image_name: "{{ image_name }}",
                    image_name_downcase: "{{ image_name | downcase }}"
                  },
                {% endfor %}
              {% endif %}
            },
            "custom_lebel": {
              {% assign product_obj = all_products[handle] %}
              {% if product_obj != blank %}
                {% assign personalise_label = product_obj.metafields.custom.personalise_label.value %}
                {% assign image_data_array = "" %}
                {% if personalise_label %}
                  {% assign parsed_json = personalise_label | parse_json %}
                  {% assign personalise_labels = parsed_json.personalize_image_labels.value %}
                  {% for personaliselabel in personalise_labels %}
                    {% assign image_url = personaliselabel | img_url: 'master' %}
                    {% assign image_url_clean = image_url | split: '?' | first %}
                    {% assign image_name = image_url_clean | split: '/' | last %}
                    {% assign image_name = image_name | split: '.' | first %}
                    {% assign image_name = image_name | split: '---' | last %}
                    {% assign image_name = image_name | downcase %}
                    {% assign image_data = image_name | append: '|' | append: image_url_clean %}
                    {% if forloop.first %}
                      {% assign image_data_array = image_data %}
                    {% else %}
                      {% assign image_data_array = image_data_array | append: ',' | append: image_data %}
                    {% endif %}
                  {% endfor %}
                {% endif %}
                {% assign meta_obj = product_obj.metafields.custom.custom_lebel_color.value %}
                {% if meta_obj == blank %}
                  {% assign meta_obj = shop.metaobjects.custom_lebel_color.values %}
                {% endif %}
                {% for meta_objlist in meta_obj %}
                  {% assign personal_image_labels = '' %}
                  {% assign custom_color_name = meta_objlist.custom_color_name.value | downcase %}
                  {% if personalise_labels %}
                    {% assign imagedate = image_data_array | split: ',' %}
                    {% for imagedataarray in imagedate %}
                      {% assign imagedataarrays = imagedataarray | split: '|' %}
                      {% assign imagedataarrayss = imagedataarrays | first %}
                      {% if imagedataarrayss == custom_color_name %}
                        {% assign personal_image_labels = imagedataarrays | last %}
                        {% break %}
                      {% endif %}
                    {% endfor %}
                  {% endif %}
                  {% if personalise_label %}
                    "fabrication_{{ forloop.index }}": {
                      test: "{{ personal_image_labels }}",
                      image_url: "{{ personal_image_labels }}",
                      color_image_lebel: "{{ personal_image_labels }}",
                      color_picker: "{{ meta_objlist.color_picker.value }}",
                      custom_color_name: "{{ custom_color_name }}"
                    },
                  {% endif %}
                {% endfor %}
              {% endif %}
            },
            "color_seetings": {
              {% assign product_obj = all_products[handle] %}
              {% if product_obj != blank %}
                {% if product_obj.metafields.custom.custom_colours != blank %}
                  {% assign swatch_config = settings.color_swatch_config | append: '<br />' | append: product_obj.metafields.custom.custom_colours %}
                {% else %}
                  {% assign swatch_config = settings.color_swatch_config %}
                {% endif %}
                {%- assign swatch_config = swatch_config | newline_to_br | split: '<br />' -%}
                {% for swatch_item in swatch_config %}
                  {% assign swatch_parts = swatch_item | split: ':' %}
                  {% assign swatch_name = swatch_parts.first | downcase | strip | replace:' ','-' %}
                  {% assign swatch_image = swatch_parts.last | strip %}
                  {% if images[swatch_image] != blank %}
                    "{{swatch_name}}": {
                      "name": "{{swatch_name}}",
                      "image": "{{images[swatch_image] | image_url: width: 1 }}"
                    }{% unless forloop.last %},{% endunless %}
                  {% endif %}
                {% endfor %}
              {% endif %}
            }
          }{% unless forloop.last %},{% endunless %}
        {% endfor %}
      };

      $labelCollectionDetails_new = {
        {% for productsmain_item in productsmain_array %}
          {% assign productsmain_items = productsmain_item | replace: '{', '' | replace: '}', '' %}
          {% assign productsmain_itemss = productsmain_items | split: '--' %}
          {% for productsmain_itemsss in productsmain_itemss %}
            {% assign productsmain_itemssss = productsmain_itemsss | replace: '"', '' | split: ':' %}
            {% if productsmain_itemssss[0] == 'id' %}
              {% assign id_tert = productsmain_itemssss[1] %}
            {% endif %}
          {% endfor %}
          "{{ id_tert }}": {
            product: { "id": {{ id_tert }} },
            variants: [
              {% if productsmain_itemssss[0] == 'variants' %}
                {% assign variants = productsmain_itemssss[1] | replace: '[', '' | replace: ']', '' | split: '=' %}
                {% for variant in variants %}
                  {% assign variant_coma = variant | replace: '(', '' | replace: ')', '' | split: ',' %}
                  {% for variant_comas in variant_coma %}
                    {% assign variant_data = variant_comas | split: '%' %}
                    {% if variant_data[0] == 'id' %}{% assign id_v=variant_data[1] %}{% endif %}
                    {% if variant_data[0] == ' title' %}{% assign title_v=variant_data[1] %}{% endif %}
                    {% if variant_data[0] == ' vareint_image' %}{% assign image_v=variant_data[1] %}{% endif %}
                    {% if variant_data[0] == ' available' %}{% assign available_v=variant_data[1] %}{% endif %}
                    {% if variant_data[0] == ' price' %}{% assign price_v=variant_data[1] %}{% endif %}
                    {% if variant_data[0] == ' option_one' %}{% assign option_one_v=variant_data[1] %}{% endif %}
                    {% if variant_data[0] == ' option_two' %}{% assign option_two_v=variant_data[1] %}{% endif %}
                    {% assign variant_data = title_v | split: " / " %}
                    {% assign variant_data_0 = variant_data[0] | downcase | strip %}
                    {% assign variant_data_1 = variant_data[1] | strip %}
                  {% endfor %}
                  {
                    "id": {{ id_v }},
                    "title": "{{ title_v }}",
                    "option1": "{{ variant_data_0 }}",
                    "option2": "{{ variant_data_1 }}",
                    "featured_image": "{{ image_v }}",
                    "available": {{ available_v }},
                    "price": {{ price_v }}
                  }{% unless forloop.last %},{% endunless %}
                {% endfor %}
              {% endif %}
            ]
          }{% unless forloop.last %},{% endunless %}
        {% endfor %}
      };

      // Helper function to parse prices consistently
      function parsePrice(price) {
        if (typeof price === 'number') return price < 100 ? price : price / 100;
        if (typeof price === 'string') {
          const numericValue = parseFloat(price.replace(/[^0-9.]/g, ''));
          return isNaN(numericValue) ? 0 : numericValue;
        }
        return 0;
      }

      // Helper function to find variant by ID
      function findVariantById(variantId) {
        if (!variantId) return null;
        
        // Search in products_new first
        for (const productId in products_new) {
          const variants = products_new[productId]?.product_variants || [];
          const variant = variants.find(v => v.variant_id == variantId);
          if (variant) return variant;
        }
        
        // Search in personalized variants if not found
        return $personalizedVariantsr.find(v => v.id == variantId);
      }

      // Function to update price display in existing price field
      function updateBundlePriceDisplay() {
        let totalPrice = calculateBundlePrice();
        let totalComparePrice = calculateBundleComparePrice();

        $('.product-info__block-item[data-block-type="price"] sale-price').text(`$${totalPrice.toFixed(2)}`);
        $('.product-info__block-item[data-block-type="price"] compare-at-price').text(`$${totalComparePrice.toFixed(2)}`);

        const singleProduct = document.querySelector('.crard-show_single-product');
        const hasPersonalized = $('.personalized-bundle-sections .cl-product-select-true').length > 0;
        let completedOptions = $('.personalized-bundle-sections .bundle-template-option').filter(function() {
          return $(this).find('.crard-show[data-id]').length > 0 || 
                $(this).find('.crard-show-personalized[data-id]').length > 0;
        }).length;

        let totalCards = $('.bundle-template-option').length;

        // if (optionLength === 0 && cardLength > 0) {
        if (completedOptions === totalCards) {
          $('.buy-buttons-simplebundle button')
            .attr('id', 'product-buy-button-simplebundle')
            .removeAttr('disabled')
            .css({ 'background-color': 'red', 'border-color': 'red' });
        } else {
          $('.buy-buttons-simplebundle button')
            .attr('id', 'product-disables-button-simplebundle')
            .attr('disabled', true)
            .css({ 'background-color': '#939598', 'border-color': '#939598' });
        }
      }

      function calculateBundlePrice() {
        let totalBundlePrice = 0;
        const discountRate = 0.9;

        // Handle other bundle items
        document.querySelectorAll('.card-show_others').forEach(card => {
          let variantId = card.getAttribute('data-id');
          let variant = findVariantById(variantId);
          if (!variant) {
            console.warn(`No variant found for variant ID: ${variantId}`);
            return;
          }

          let price = parsePrice(variant.variant_price);
          console.log('price', price);
          let isEzyBone = ['47520523944232', '47520523977000', '47520524009768'].includes(variantId);
          if (isEzyBone) {
            console.log(`EzyBones Chew Toy detected, variant ID: ${variantId}, variant:`, variant, `original price: ${price}, excluded from total (free product)`);
          } else {
            let discountedPrice = variant.no_discount ? price : price * discountRate;
            if (price > 0) {
              totalBundlePrice += discountedPrice;
              // console.log(`Bundle item variant ID: ${variantId}, price: ${price}, discounted: ${discountedPrice.toFixed(2)}`);
            } else {
              console.warn(`Invalid price for variant ID: ${variantId}, price: ${price}`);
            }
          }
        });

        // Handle personalized product
        const personalizedProduct = document.querySelector('.card-show_personalised');
        if (personalizedProduct) {
          let variantId = personalizedProduct.getAttribute('data-id');
          let variant = findVariantById(variantId);
          if (variant) {
            let price = parsePrice(variant.variant_price);
            let discountedPrice = price * discountRate;
            if (price > 0) {
              totalBundlePrice += discountedPrice;
              //console.log(`Personalized product variant ID: ${variantId}, price: ${price}, discounted: ${discountedPrice.toFixed(2)}`);
            } else {
              console.warn(`Invalid price for personalized product variant ID: ${variantId}, price: ${price}`);
            }
          }
        }

        // Handle personalized labels
        const personalizedLabels = document.querySelector('.crard-show-personalized');
        if (personalizedLabels) {
          let variantId = personalizedLabels.getAttribute('data-id');
          let variant = $personalizedVariantsr.find(item => item.id == variantId);
          if (variant) {
            let price = parsePrice(variant.price);
            if (variantId === '49202310840616') {
              price = 19.99;
            }
            if (price > 0) {
              totalBundlePrice += price;
              // console.log(`Personalized labels variant ID: ${variantId}, price: ${price}`);
            } else {
              console.warn(`Invalid price for personalized labels variant ID: ${variantId}, price: ${price}`);
            }
          }
        }

        let finalPrice = parseFloat(totalBundlePrice.toFixed(2));
        // console.log(`Total bundle price: ${finalPrice}`);
        return finalPrice;
      }

      function calculateBundleComparePrice() {
        let totalBundlePrice = 0;
        //const discountRate = 0.9;

        // Handle other bundle items
        document.querySelectorAll('.card-show_others').forEach(card => {
          let variantId = card.getAttribute('data-id');
          let variant = findVariantById(variantId);
          if (!variant) {
            console.warn(`No variant found for variant ID: ${variantId}`);
            return;
          }

          let price = parsePrice(variant.variant_price);
          console.log('price', price);
          let isEzyBone = ['47520523944232', '47520523977000', '47520524009768'].includes(variantId);
          if (isEzyBone) {
            console.log(`EzyBones Chew Toy detected, variant ID: ${variantId}, variant:`, variant, `original price: ${price}, excluded from total (free product)`);
          } else {
            if (price > 0) {
              totalBundlePrice += price;
              // console.log(`Bundle item variant ID: ${variantId}, price: ${price}, discounted: ${discountedPrice.toFixed(2)}`);
            } else {
              console.warn(`Invalid price for variant ID: ${variantId}, price: ${price}`);
            }
          }
        });

        // Handle personalized product
        const personalizedProduct = document.querySelector('.card-show_personalised');
        if (personalizedProduct) {
          let variantId = personalizedProduct.getAttribute('data-id');
          let variant = findVariantById(variantId);
          if (variant) {
            let price = parsePrice(variant.variant_price);
            if (price > 0) {
              totalBundlePrice += price;
              //console.log(`Personalized product variant ID: ${variantId}, price: ${price}, discounted: ${discountedPrice.toFixed(2)}`);
            } else {
              console.warn(`Invalid price for personalized product variant ID: ${variantId}, price: ${price}`);
            }
          }
        }

        // Handle personalized labels
        const personalizedLabels = document.querySelector('.crard-show-personalized');
        if (personalizedLabels) {
          let variantId = personalizedLabels.getAttribute('data-id');
          let variant = $personalizedVariantsr.find(item => item.id == variantId);
          if (variant) {
            let price = parsePrice(variant.price);
            if (variantId === '49202310840616') {
              price = 19.99;
            }
            if (price > 0) {
              totalBundlePrice += price;
              // console.log(`Personalized labels variant ID: ${variantId}, price: ${price}`);
            } else {
              console.warn(`Invalid price for personalized labels variant ID: ${variantId}, price: ${price}`);
            }
          }
        }

        let finalComparePrice = parseFloat(totalBundlePrice.toFixed(2));
        // console.log(`Total bundle price: ${finalPrice}`);
        return finalComparePrice;
      }

      const accordions = document.querySelectorAll('.bundle-template-option .accordion.cl-accordion-label-customise .cl-product-select-false');
      accordions.forEach((accordion, index) => {
        accordion.addEventListener('click', function () {
          let product_id = $(this).attr('data-pdid');
          let classelement = $(this).parents('.bundle-template-option').attr('class').replace('bundle-template-option', '').trim();
          $('.'+classelement+' .cl-accordion-label-customise span#label-select-text').text($(this).find('.cl-checkbox-container span').text());

          $labelFabricationDetails = {
            {% for product in filtered_products %}
              "{{ product.id }}": {
                fabrication_list: {
                  {% assign sibling_handles = product.metafields.custom.product_sibling.value %}
                  {%- if sibling_handles -%}
                    {% for handle in sibling_handles %}
                      {% assign id_handle = handle.id %}
                      {% assign fabractions= handle.metafields.custom.fabrication.value.name %}
                      {% assign fabractions_img= handle.metafields.custom.fabrication.value.image %}
                      "fabrication_{{ forloop.index }}": {
                        fabrcationsList_id: '{{ id_handle }}',
                        fabrcationsList_name: '{{ fabractions }}',
                        fabrcationsList_img: '{{ fabractions_img.value | img_url: 'master' }}'
                      }{% unless forloop.last %},{% endunless %}
                    {% endfor %}
                  {%- endif -%}
                }
              }{% unless forloop.last %},{% endunless %}
            {% endfor %}
          };

          if (products_new[product_id]) {
            var $labelProductVariants_new = products_new[product_id];
          } else {
            console.error('Product not found in allProducts.');
          }

          let labelFabricationDetails = $labelFabricationDetails[product_id];
          let sizeOptionHtml = '';
          if (
            labelFabricationDetails &&
            labelFabricationDetails.fabrication_list &&
            Object.keys(labelFabricationDetails.fabrication_list).length > 0
          ) {
            let hasValidVariantImage = false;
            for (let key in labelFabricationDetails.fabrication_list) {
              const fabrication = labelFabricationDetails.fabrication_list[key];
              const filteredVariant = filterProductsBySizeColorAndId(
                fabrication.fabrcationsList_id,
                fabrication.size,
                fabrication.color
              );
              if (filteredVariant[0] && filteredVariant[0].varient_image) {
                hasValidVariantImage = true;
                break;
              }
            }
            if (hasValidVariantImage) {
              sizeOptionHtml += `
                <div class="first-product-slect" id="select-leash">
                  <label>Choose your Harness</label>
                  <select class="select-leash select-option">
                    <option value="">Choose your Product</option>`;
              let isFirstOption = true;
              for (let key in labelFabricationDetails.fabrication_list) {
                const fabrication = labelFabricationDetails.fabrication_list[key];
                const filteredVariant = filterProductsBySizeColorAndId(
                  fabrication.fabrcationsList_id,
                  fabrication.size,
                  fabrication.color
                );
                if (filteredVariant[0] && filteredVariant[0].varient_image) {
                  const selectedAttr = isFirstOption ? 'selected' : '';
                  sizeOptionHtml += `
                    <option value="${fabrication.fabrcationsList_id}" ${selectedAttr}>
                      ${fabrication.fabrcationsList_name}
                    </option>`;
                  isFirstOption = false;
                }
              }
              sizeOptionHtml += `</select></div>`;
            }
          }

          var $labelCollectionDetails = $labelCollectionDetails_new[product_id];
          const products_color = [{{ array_bundleoption_main }}];
          const products_sizes = [{{ array_bundleoption_main_sizes }}];
          const filteredProducts_color = products_color.filter(products_color => products_color.includes(classelement) && products_color.includes(product_id));
          const filteredProducts_sizes = products_sizes.filter(products_sizes => products_sizes.includes(classelement) && products_sizes.includes(product_id));

          let sizes = new Set();
          let colers = new Set();
          let sizes_array = 'false';
          let sizeOptionHtmlsizes = ``;
          let sizeOptionHtmlcolor = ``;
          let prduct_sizes = '';
          let prduct_color = '';

          if ($labelCollectionDetails) {
            sizeOptionHtmlsizes += `<div class="first-product-slect" id="select-sizes">
              <label>Choose your Size</label>
              <select class="select-sizes select-option">
                <option value="">Choose your Size</option>`;
            let isFirstOptionSizes = true;
            let isFirstColorOption = true;
            $labelCollectionDetails.variants.forEach(variant => {
              if (variant.option2 && !sizes.has(variant.option2)) {
                sizes.add(variant.option2);
                let sizesmatches = filteredProducts_sizes.length > 0 ?
                  filteredProducts_sizes.some(fs => fs.includes(variant.option2)) ? 'style="display:block;"' : 'style="display:none;"' :
                  'style="display:block;"';
                let selectedAttrSize = sizesmatches === 'style="display:block;"' && isFirstOptionSizes ? 'selected' : '';
                if (selectedAttrSize) prduct_sizes = variant.option2;
                sizeOptionHtmlsizes += `<option value="${variant.option2}" ${selectedAttrSize} ${sizesmatches}>${variant.option2}</option>`;
                sizes_array = 'true';
                if (selectedAttrSize) isFirstOptionSizes = false;
              }
            });
            $labelCollectionDetails.variants.forEach(variant => {
              if (variant.option1 && !colers.has(variant.option1)) {
                let lowerCaseOption = variant.option1.toLowerCase().replace(/ /g, '-');
                colers.add(variant.option1);
                let colorimage = '';
                $.each(products_new[product_id].color_seetings, function(index, variant) {
                  if (variant.name === lowerCaseOption) {
                    colorimage = variant.image;
                    return false;
                  }
                });
                let colormatches = filteredProducts_color.length > 0 ?
                  filteredProducts_color.some(fc => {
                    const parts = fc.split('_');
                    return parts[parts.length - 1] === prduct_sizes && parts[parts.length - 2] === lowerCaseOption;
                  }) ? 'style="display:block;"' : 'style="display:none;"' :
                  'style="display:block;"';
                let activeClass = colormatches === 'style="display:block;"' && isFirstColorOption ? 'color-swatch-active' : '';
                if (activeClass) prduct_color = lowerCaseOption;
                sizeOptionHtmlcolor += `<div ${colormatches} id="${activeClass}">
                  <div class="cl-color-checkboxnew loadImage">
                    <input class="cl-color-checkbox" data-color="${lowerCaseOption}" type="checkbox" id="upsell-patch-color-${lowerCaseOption}" name="color-option">
                    <label class="color-swatch rounded-full colorbundle-${lowerCaseOption} ${activeClass}" for="upsell-patch-color-${lowerCaseOption}" data-option-value="${lowerCaseOption}" style="background-image: url('/${colorimage}')"></label>
                  </div>
                </div>`;
                if (activeClass) isFirstColorOption = false;
              }
            });
            sizeOptionHtmlsizes += `</select></div>`;
          }
          if (sizes_array == 'false') sizeOptionHtmlsizes = '';

          const accordionParent = accordion.closest('.accordion.cl-accordion-label-customise');
          const isExpanded = accordionParent.getAttribute('aria-expanded') === 'true';
          accordionParent.setAttribute('aria-expanded', !isExpanded);

          let existingModal = document.querySelector('#simple-bundle-template-popup');
          if (existingModal) existingModal.remove();

          const modal = document.createElement('x-modal');
          modal.setAttribute('id', 'simple-bundle-template-popup');
          modal.setAttribute('class', 'modal modal--lg modal-app-ezy');
          modal.setAttribute('role', 'dialog');
          modal.setAttribute('aria-modal', 'true');
          modal.setAttribute('open', '');
          modal.setAttribute('style', 'display: block; opacity: 1;');

          let productSizes = $('#select-sizes option:selected').val() || prduct_sizes;
          let productColor = $('#color-options label.color-swatch-active').attr('data-option-value') || prduct_color;
          let filteredProducts = filterProductsBySizeColorAndId(product_id, productSizes, productColor);

          const content = `
            <div class="popup-content-wrapper" id="poup-${filteredProducts[0].product_id}">
              <div class="popupcontent">
                <div class="row-cust">
                  <div class="first-column-wrapper">
                    <div class="column-cust first-column imageoverlay">
                      <img src="${filteredProducts[0].varient_image}" data-zoom="${filteredProducts[0].varient_image}" width="100%" height="100%">
                    </div>
                  </div>
                  <div class="second-column-wrapper">
                    <div class="customizer container">
                      <div class="banner">
                        <b>CHOOSE YOUR ${filteredProducts[0].product_title}</b>
                      </div>
                      ${sizeOptionHtml}
                      ${sizeOptionHtmlsizes}
                      <div class="select-color">
                        <label>Choose your Color</label>
                        <div class="cl-color-selector-wrapper">
                          <div class="cl-color-selector" id="color-options">
                            <div class="color-option_silder1" id="slicesslider">${sizeOptionHtmlcolor}</div>
                          </div>
                        </div>
                      </div>
                      <div id="button-wrapper_new" class="button-wrapper1" style="display: flex; align-items: center; margin-top: 28px; gap: 8px;">
                        <button class="button btn-cancel-custom" id="popupclose-cancel" style="background-color: black; border-color: black;">Cancel</button>
                        <button id="upsell-patch_new" class="d-block button button-" data-product-id="${product_id}" data-class="${classelement}" style="margin-top: 0px;width: 100%;">
                          <span id="add-patch-text_new" class="add-text-">ADD TO BUNDLE</span>
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>`;

          modal.innerHTML += content;
          document.body.appendChild(modal);

          const bundlepopupcancle = document.querySelector('#popupclose-cancel');
          if (bundlepopupcancle) {
            bundlepopupcancle.addEventListener('click', function () {
              const bundlepopup = document.querySelector('#simple-bundle-template-popup');
              bundlepopup.remove();
            });
          }
        });
      });

      $(document).on('change', '#simple-bundle-template-popup #select-sizes .select-sizes', function(event) {
        event.preventDefault();
        let val = $(this).val();
        let product_id = $('#upsell-patch_new').attr('data-product-id');
        let classelement = $('#upsell-patch_new').attr('data-class');
        const products_color = [{{ array_bundleoption_main }}];
        const filteredProducts_color = products_color.filter(products_color => products_color.includes(classelement) && products_color.includes(product_id));
        var $labelCollectionDetails = $labelCollectionDetails_new[product_id];
        let colers = new Set();
        let sizeOptionHtmlcolor = ``;
        let prduct_color = '';
        let isFirstColorOption = true;

        if ($labelCollectionDetails) {
          $labelCollectionDetails.variants.forEach(variant => {
            if (variant.option1 && !colers.has(variant.option1)) {
              let lowerCaseOption = variant.option1.toLowerCase().replace(/ /g, '-');
              colers.add(variant.option1);
              let colorimage = '';
              $.each(products_new[product_id].color_seetings, function(index, variant) {
                if (variant.name === lowerCaseOption) {
                  colorimage = variant.image;
                  return false;
                }
              });
              let colormatches = filteredProducts_color.length > 0 ?
                filteredProducts_color.some(fc => {
                  const parts = fc.split('_');
                  return parts[parts.length - 1] === val && parts[parts.length - 2] === lowerCaseOption;
                }) ? 'style="display:block;"' : 'style="display:none;"' :
                'style="display:block;"';
              let activeClass = colormatches === 'style="display:block;"' && isFirstColorOption ? 'color-swatch-active' : '';
              if (activeClass) prduct_color = lowerCaseOption;
              sizeOptionHtmlcolor += `<div ${colormatches} id="${activeClass}">
                <div class="cl-color-checkboxnew loadImage">
                  <input class="cl-color-checkbox" data-color="${lowerCaseOption}" type="checkbox" id="upsell-patch-color-${lowerCaseOption}" name="color-option">
                  <label class="color-swatch rounded-full colorbundle-${lowerCaseOption} ${activeClass}" for="upsell-patch-color-${lowerCaseOption}" data-option-value="${lowerCaseOption}" style="background-image: url('/${colorimage}')"></label>
                </div>
              </div>`;
              if (activeClass) isFirstColorOption = false;
            }
          });
          $('.color-option_silder1').html(sizeOptionHtmlcolor);
        }
      });

      $(document).on('change', '#select-leash .select-option', function() {
        let val = $(this).val();
        let pruduct = products_new[val];
        var $labelCollectionDetails_change = $labelCollectionDetails_new[val];
        $('.first-column-wrapper .imageoverlay img').attr('src', pruduct.product_image);
        var sizeschangehtml = '<option value="">Choose your Size</option>';
        var colorchangehtml = '';
        let sizes = new Set();
        let colers = new Set();
        let isFirstOptionSizes = true;
        let isFirstColorOption = true;

        if ($labelCollectionDetails_change) {
          $labelCollectionDetails_change.variants.forEach(variant => {
            if (variant.option2 && !sizes.has(variant.option2)) {
              sizes.add(variant.option2);
              let selectedAttrSizes = isFirstOptionSizes ? 'selected' : '';
              sizeschangehtml += `<option value="${variant.option2}" ${selectedAttrSizes}>${variant.option2}</option>`;
              isFirstOptionSizes = false;
            }
            if (variant.option1 && !colers.has(variant.option1)) {
              let lowerCaseOption = variant.option1.toLowerCase().replace(/ /g, '-');
              colers.add(variant.option1);
              let activeClass = isFirstColorOption ? 'color-swatch-active' : '';
              let colorimage = products_new[val].color_seetings[lowerCaseOption];
              colorimage = colorimage && typeof colorimage.image !== 'undefined' ? colorimage.image : '';
              colorchangehtml += `<div>
                <div class="cl-color-checkboxnew loadImage">
                  <input class="cl-color-checkbox" data-color="${lowerCaseOption}" type="checkbox" id="upsell-patch-color-${lowerCaseOption}" name="color-option">
                  <label class="color-swatch rounded-full colorbundle-${lowerCaseOption} ${activeClass}" for="upsell-patch-color-${lowerCaseOption}" data-option-value="${lowerCaseOption}" style="background-image: url('/${colorimage}')"></label>
                </div>
              </div>`;
              isFirstColorOption = false;
            }
          });
          $('#slicesslider').html(colorchangehtml);
          $('#select-sizes .select-option').html(sizeschangehtml);
          $('.banner b').text('CHOOSE YOUR ' + pruduct.product_title);
        }

        let productSizes = $('#select-sizes option:selected').val();
        let productColor = $('#color-options label.color-swatch-active').attr('data-option-value');
        let filteredProducts = filterProductsBySizeColorAndId(val, productSizes, productColor);
        $('.imageoverlay img').attr('src', filteredProducts[0].varient_image);
      });

      $(document).on('click', '#upsell-patch_new', function(event) {
        event.preventDefault();
        var selectLeash = document.querySelector('#select-leash');
        let productId = selectLeash ? $('#select-leash option:selected').val() : $(this).attr('data-product-id');
        let title_leash = selectLeash ? ' - ' + $('#select-leash option:selected').text() : '';
        let productSizes = $('#select-sizes option:selected').val();
        let productColor = $('#color-options label.color-swatch-active').attr('data-option-value');
        let classelemtns = $(this).attr('data-class');
        let p_title = '';
        let p_id = '';
        let p_price = '';

        let filteredProducts = filterProductsBySizeColorAndId(productId, productSizes, productColor);
        // console.log('Adding product:', { productId, title: filteredProducts[0].product_title, variantId: filteredProducts[0].variant_id, variantTitle: filteredProducts[0].variant_title, class: classelemtns });
        $('#crard-show_' + classelemtns).remove();

        p_title = filteredProducts[0].variant_title || filteredProducts[0].product_title;
        p_id = filteredProducts[0].variant_id || productId;
        p_price = filteredProducts[0].varient_price || filteredProducts[0].product_prices;

        let originalPrice = parsePrice(p_price);
        let isEzyBone = productId === '8865809957160' || ['47520523944232', '47520523977000', '47520524009768'].includes(p_id);
        let displayPrice = isEzyBone ? "0.00" : (originalPrice).toFixed(2);
        // console.log(`Product ${productId}, variant ${p_id} isEzyBone: ${isEzyBone}, display price: $${displayPrice}`);

        let apendbundlehtml = `<div class="crard-show row card-show_others" id="crard-show_${classelemtns}" data-id="${p_id}"><div class="container">`;
        apendbundlehtml += `<div class="col-first">
          <figure>
            <img id="image-product" src="${filteredProducts[0].varient_image}" width="100px" height="100px">
          </figure>
        </div>
        <div class="col-second">
          <h3>${filteredProducts[0].product_title}${title_leash}</h3>
          <span class="color-p">${filteredProducts[0].variant_title}</span>
          <span class="price" style="display: block; font-weight: 600;">Price: $${displayPrice}</span>
        </div>`;
        apendbundlehtml += `</div>
          <button type="button" class="card-close-button" data-class_element="${classelemtns}">
            <svg aria-hidden="true" focusable="false" fill="none" width="14" class="icon icon-close" viewBox="0 0 16 16">
              <path d="m1 1 14 14M1 15 15 1" stroke="currentColor" stroke-width="1.5"></path>
            </svg>
          </button>
        </div>`;
        $('.' + classelemtns).append(apendbundlehtml);

        // console.log('Card added:', { class: classelemtns, dataId: p_id, price: displayPrice });
        updateBundlePriceDisplay();

        const bundlepopup = document.querySelector('#simple-bundle-template-popup');
        bundlepopup.remove();

        $('.' + classelemtns + ' .cl-accordion-label-customise span#label-select-text').text(filteredProducts[0].product_title);
      });

      function filterProductsBySizeColorAndId(productId, size, color) {
        let filtered = {};
        if (productId) {
          let product = products_new[productId];
          if (!product) return {};

          let matchingVariant = product.product_variants.find(variant =>
            (size ? variant.option_2 === size : true) &&
            (color ? variant.option_1 === color : true)
          );

          if (matchingVariant) {
            filtered[0] = {
              "product_id": productId,
              "product_title": product.product_title,
              "product_prices": product.product_price,
              "variant_id": matchingVariant.variant_id,
              "variant_title": matchingVariant.variant_title,
              "varient_option1": matchingVariant.option_1,
              "varient_option2": matchingVariant.option_2,
              "varient_image": matchingVariant.variant_image,
              "varient_price": matchingVariant.variant_price
            };
          }
        }
        return filtered;
      }

      $(document).on('click', '.color-option_silder1 .loadImage .color-swatch', function(event) {
        event.preventDefault();
        $('.color-option_silder1 .loadImage .color-swatch-active').removeClass('color-swatch-active');
        $(this).addClass('color-swatch-active');
        var selectLeash = document.querySelector('#select-leash');
        let productId = selectLeash ? $('#select-leash option:selected').val() : $('#upsell-patch_new').attr('data-product-id');
        let productSizes = $('#select-sizes option:selected').val();
        let productColor = $('#color-options label.color-swatch-active').attr('data-option-value');
        let filteredProducts = filterProductsBySizeColorAndId(productId, productSizes, productColor);
        $('.imageoverlay img').attr('src', filteredProducts[0].varient_image);
      });

      $(document).on('click', 'button#product-buy-button-simplebundle', function(event) {
        event.preventDefault();
        var itemsToAdd = [];
        const quantity = 1;
        let bundleItems = [];
        let labels = [];
        let bundle_product = {};
        let totalBundlePrice = calculateBundlePrice();

        // First count all the items that will be in the bundle
        let itemCount = 0;
        
        const singleProduct = document.querySelector('.crard-show_single-product');
        if (singleProduct) itemCount++;
        
        document.querySelectorAll('.card-show_others').forEach(card => {
            itemCount++;
        });
        
        const personalizedProduct = document.querySelector('.card-show_personalised');
        if (personalizedProduct) itemCount++;
        
        const personalizedLabels = document.querySelector('.crard-show-personalized');
        if (personalizedLabels) itemCount++;

        // Calculate equal price for each item
        const itemPrice = parseFloat((totalBundlePrice / itemCount).toFixed(2));

        // Now process each item with the equal price
        if (singleProduct) {
          let productId = singleProduct.getAttribute('data-id');
          let heading = singleProduct.closest('#simple-bundles-options')?.querySelector('h3.heading')?.textContent || '';
          let title = singleProduct.querySelector('h3').textContent;
          let size = singleProduct.querySelector('span.color-p').textContent;
          bundle_product[heading] = `${title}---${size}`;
          bundleItems.push({
            variantId: `gid://shopify/ProductVariant/${productId}`,
            quantity: 1,
            price: itemPrice
          });
        }

        document.querySelectorAll('.card-show_others').forEach(card => {
          let heading = card.closest('#simple-bundles-options')?.querySelector('h3.heading')?.textContent || card.closest('#personalized-bundle-option')?.querySelector('h3.heading')?.textContent || '';
          let title = card.querySelector('h3').textContent || 'test product';
          let size = card.querySelector('span.color-p').textContent || 'product size';
          let productId = card.getAttribute('data-id');
          bundle_product[heading] = `${title}---${size}`;
          bundleItems.push({
            variantId: `gid://shopify/ProductVariant/${productId}`,
            quantity: 1,
            price: itemPrice
          });
        });

        if (personalizedProduct) {
          let productId = personalizedProduct.getAttribute('data-id');
          let heading = personalizedProduct.closest('#personalized-bundle-option')?.querySelector('h3.heading')?.textContent || '';
          let title = personalizedProduct.querySelector('h3').textContent;
          let size = personalizedProduct.querySelector('span').textContent;
          bundle_product[heading] = `${title}---${size}`;
          bundleItems.push({
            variantId: `gid://shopify/ProductVariant/${productId}`,
            quantity: 1,
            price: itemPrice
          });
        }

        if (personalizedLabels) {
          let productId = personalizedLabels.getAttribute('data-id');
          let title = 'Personalised Labels';
          let size = personalizedLabels.querySelector('span.color-p').textContent;
          let messages_text = personalizedLabels.querySelector('span.messages-text').textContent;
          let messages_number = personalizedLabels.querySelector('span.messages-phonenumber').textContent;
          bundle_product['Products_Pesonalised'] = `${title}---${size}`;
          bundle_product['Message'] = messages_text;
          bundle_product['Phone Number'] = messages_number;
          labels = {
            "Custom Message": messages_text,
            "Phone Number": messages_number
          };
          bundleItems.push({
            variantId: `gid://shopify/ProductVariant/${productId}`,
            quantity: 1,
            price: itemPrice,
            attributes: {
              CustomName: messages_text,
              PhoneNumber: messages_number
            }
          });
        }

        // console.log('bundleItems:', bundleItems);
        const formDataw = {
          id: {{ mainproduct_id }},
          quantity: 1,
          price: totalBundlePrice,
          properties: {
            _bundle_product: bundle_product,
            _bundle: JSON.stringify(bundleItems)
          }
        };

        itemsToAdd.push(formDataw);
        // console.log('itemsToAdd', itemsToAdd);
        if (itemsToAdd.length > 0) {
          addToCartsimplebundle(itemsToAdd, labels, bundle_product, "{{product.title }}");
        }
      });

      function addToCartsimplebundle(items, labels, bundleProducts, bundleName) {
        if (!bundleName) bundleName = `Bundle ${Date.now()}`;
        console.log('items', items);
        
        // Map items and calculate expected bundle pricing (for tracking only)
        let cartItems = [];
        let bundlePricingInfo = [];
        
        items.forEach(item => {
          let variant = findVariantById(item.id);
          let isEzyBone = ['47520523944232', '47520523977000', '47520524009768'].includes(item.id);
          
          // Skip bundle product
          if (item.id === '49590522020136') {
            console.warn(`Skipping bundle product ID: ${item.id}`);
            return;
          }

          if (!variant) {
            // console.warn(`No variant found for item ID: ${item.id}`);
            cartItems.push({
              id: item.id,
              quantity: item.quantity,
              properties: { _bundle_name: bundleName, ...(item.properties || {}) }
            });
            return;
          }

          let price = parsePrice(variant.variant_price);
          let discountedPrice = isEzyBone ? 0 : (variant.no_discount ? price : price * 0.9);
          
          // Override price for Labels to match UI
          if (item.id === '49202310840616') {
            discountedPrice = 19.99; // Ensure Labels is $19.99
          }
          
          let priceInCents = Math.round(discountedPrice * 100);
          // console.log(`Item ${item.id} isEzyBone: ${isEzyBone}, original price: ${price}, expected bundle price: ${discountedPrice.toFixed(2)}, price in cents: ${priceInCents}`);

          // Store expected pricing info for tracking
          bundlePricingInfo.push({
            id: item.id,
            quantity: item.quantity,
            originalPrice: price,
            expectedBundlePrice: discountedPrice,
            expectedPriceInCents: priceInCents
          });

          // Add item to cart WITHOUT price field (Shopify will use variant's default price)
          cartItems.push({
            id: item.id,
            quantity: item.quantity,
            properties: { 
              _bundle_name: bundleName,
              _expected_bundle_price: discountedPrice.toFixed(2), // Store expected price in properties for reference
              ...(item.properties || {}) 
            }
          });
        });

        // Calculate expected total for logging
        let expectedBundleTotal = bundlePricingInfo.reduce((sum, item) => sum + item.expectedBundlePrice * item.quantity, 0);
        
        $.getJSON('/cart.js', function(cart) {
          let existingGroups = [];
          let rawGroups = cart.attributes && cart.attributes.bundleGroups;

          try {
            if (typeof rawGroups === 'string') {
              existingGroups = JSON.parse(rawGroups);
            } else if (Array.isArray(rawGroups)) {
              existingGroups = rawGroups;
            }
          } catch (e) {
            console.warn('Could not parse existing bundleGroups:', e);
            existingGroups = [];
          }

          const newBundleGroup = {
            name: bundleName,
            items: bundlePricingInfo.map(item => ({
              id: item.id,
              quantity: item.quantity,
              originalPrice: item.originalPrice,
              expectedBundlePrice: item.expectedBundlePrice,
              expectedSavings: (item.originalPrice - item.expectedBundlePrice) * item.quantity
            })),
            expectedTotal: expectedBundleTotal,
            timestamp: Date.now()
          };
          existingGroups.push(newBundleGroup);
          
          const attributes = {
            bundleGroups: JSON.stringify(existingGroups),
            lastBundleExpectedTotal: expectedBundleTotal.toFixed(2)
          };
           
          $.ajax({
            type: 'POST',
            url: '/cart/add.js',
            data: JSON.stringify({
              items: cartItems, // Items WITHOUT price field
              attributes: attributes,
              note: JSON.stringify(labels)
            }),
            dataType: 'json',
            headers: {
              'Content-Type': 'application/json'
            },
            success: function(response) {
              console.log('Cart updated successfully:', response);
              
              // Check actual cart total vs expected
              $.getJSON('/cart.js', function(updatedCart) {
                let actualTotal = updatedCart.total_price / 100;
                  
                if (Math.abs(actualTotal - expectedBundleTotal) > 0.01) {
                  console.warn('⚠️ Cart total does not match expected bundle total!');
                  console.warn('You need to apply discount codes or use Shopify Scripts to achieve the bundle pricing');
                } else {
                  console.log('✅ Cart total matches expected bundle total!');
                }
              });
              
              document.dispatchEvent(new CustomEvent('cart:refresh'));
              const cartDrawerElement = document.querySelector('#cart-drawer');
              if (cartDrawerElement) {
                cartDrawerElement.show();
                $('.crard-show').remove();
                $('.crard-show-personalized').remove();
              }
            },
            error: function(xhr, status, error) {
              console.error('Error adding items to cart:', error);
              console.error('Response:', xhr.responseText);
            }
          });
        });
      }

      const accordions_label = document.querySelectorAll('.bundle-template-option .accordion.cl-accordion-label-customise .cl-product-select-true');
      accordions_label.forEach((accordion, index) => {
        accordion.addEventListener('click', function () {
          let parentclass = $(this).parents('.bundle-template-option').attr('class').replace('bundle-template-option', '').trim();
          let product_id = $(this).attr('data-pdid');
          $('.' + parentclass + ' .cl-accordion-label-customise span#label-select-text').text($(this).find('.cl-checkbox-container span').text());
          const accordionParent = accordion.closest('.accordion.cl-accordion-label-customise');
          const isExpanded = accordionParent.getAttribute('aria-expanded') === 'true';
          accordionParent.setAttribute('aria-expanded', !isExpanded);

          if (products_new[product_id]) {
            var $labelProductVariants_new = products_new[product_id];
          } else {
            console.error('Product not found in allProducts.');
          }

          let existingbutton = document.querySelector('#customizes-btn');
          if (existingbutton) existingbutton.remove();

          $('.' + parentclass).append(`<div class="customizes-btn" id="customizes-btn">
            <button type="button" id="product-customize-button" class="product-customize-btn" data-id="${product_id}" data-handle="rambler-c-straw-bottle-26oz-seafoam" data-usage="main-product">
              <div class="customize-tile">PERSONALISE IT!</div>
            </button>
          </div>`);
        });
      });

      $(document).on('click', '#product-customize-button', function() {
        let product_id = $(this).attr('data-id');
        var product_all = products_new[product_id];
        let matchedImageUrl = '';
        let colorName = '';
        let sizeName = '';
        var $labelCollectionDetails = $labelCollectionDetails_new[product_id];
        let sizes = new Set();
        let colers = new Set();
        let sizes_array = 'false';
        let sizeOptionHtmlsizes = ``;
        let sizeOptionHtmlcolor = ``;
        let isFirstColorOption = true;
        let isFirstOptionSizes = true;
        let colormatches = '';
        let sizesmatches = '';
        let prduct_color = '';
        let prduct_sizes = '';
        let classelement = $(this).parents('#personalized-bundle-option').attr('class').replace('bundle-template-option', '').trim();
        const products_color = [{{ array_bundleoption_main }}];
        const products_sizes = [{{ array_bundleoption_main_sizes }}];
        const filteredProducts_color = products_color.filter(products_color => products_color.includes(classelement) && products_color.includes(product_id));
        const filteredProducts_sizes = products_sizes.filter(products_sizes => products_sizes.includes(classelement) && products_sizes.includes(product_id));

        if ($labelCollectionDetails) {
          $labelCollectionDetails.variants.forEach(variant => {
            if (variant.option1 && !colers.has(variant.option1)) {
              colers.add(variant.option1);
              let lowerCaseOption = variant.option1.toLowerCase().replace(/ /g, '-');
              let colorimage = products_new[product_id].color_seetings[lowerCaseOption];
              colorimage = colorimage && typeof colorimage.image !== 'undefined' ? colorimage.image : '';
              colormatches = filteredProducts_color.length > 0 ?
                filteredProducts_color.some(fc => fc.includes(lowerCaseOption)) ? 'style="display:block;"' : 'style="display:none;"' :
                'style="display:block;"';
              let activeClass = colormatches === 'style="display:block;"' && isFirstColorOption ? ' colourway-active' : '';
              if (activeClass) prduct_color = lowerCaseOption;
              if (isFirstColorOption) colorName = lowerCaseOption;
              const colorMap = {
                blue: '#0d197f',
                purple: '#480F78',
                pink: '#ed1e8e',
                green: '#36462a'
              };
              const backgroundColor = colorMap[lowerCaseOption] || lowerCaseOption;
              sizeOptionHtmlcolor += `<div class="color-varient-switch ${classelement}" ${colormatches} id="${activeClass}">
                <input class="sr-only" type="radio" name="option1" id="swatch--template-${lowerCaseOption}" value="${lowerCaseOption}">
                <label id="color-swatch-${lowerCaseOption}-${variant.id}" class="color-swatch rounded-full color-varient-switch-${lowerCaseOption}${activeClass}" data-option-value="${lowerCaseOption}" style="background-color: ${backgroundColor}">
                  <span class="sr-only">${variant.option1}</span>
                </label>
              </div>`;
              if (activeClass) isFirstColorOption = false;
            }
            if (variant.option2 && !sizes.has(variant.option2)) {
              sizes.add(variant.option2);
              if (isFirstOptionSizes) sizeName = variant.option2;
              sizesmatches = filteredProducts_sizes.length > 0 ?
                filteredProducts_sizes.some(fs => {
                  const parts = fs.split('_');
                  return parts[parts.length - 1] === prduct_color && parts[parts.length - 2] === variant.option2;
                }) ? 'style="display:block;"' : 'style="display:none;"' :
                'style="display:block;"';
              let selectedAttrSize = sizesmatches === 'style="display:block;"' && isFirstOptionSizes ? ' colourwaytext-active' : '';
              if (selectedAttrSize) prduct_sizes = variant.option2;
              sizeOptionHtmlsizes += `<div class="vareint-sizes" ${sizesmatches}>
                <input class="sr-only" type="radio" name="option2" value="${variant.option2}">
                <label class="block-swatch block-swatchsize-${variant.option2} ${selectedAttrSize}" data-option-value="${variant.option2}">
                  <span>${variant.option2}</span>
                </label>
              </div>`;
              if (selectedAttrSize) isFirstOptionSizes = false;
            }
          });
        }

        let htmlcustomlabel = ``;
        let loophtmlcustomlable = ``;
        let class_imageactive = '';
        let class_labelactive = '';
        if (product_all && product_all.custom_lebel) {
          htmlcustomlabel += `<div class="h-stack gap-1"><legend class="Barlow-Medium letter-spacing-md">Label Colourway</legend></div>
            <div>
              <div class="cl-color-selector-wrapper">
                <button type='button' class='cl-color-prev-btn'>
                  <img src='https://kjmbqc5060wi7n6e-79637807400.shopifypreview.com/cdn/shop/t/42/assets/carousel-left.png' />
                </button>
                <div class="cl-color-selector" id="color-options">
                  <div class="color-option_silder1" id="slicesslider">`;
          for (let key in product_all.custom_lebel) {
            let variant = product_all.custom_lebel[key];
            class_imageactive = key == 'fabrication_1' ? ' loadimage-active' : '';
            class_labelactive = key == 'fabrication_1' ? ' color-swatch-active' : '';
            loophtmlcustomlable += `<div>
              <div class="cl-color-checkboxnew loadImage${class_imageactive}" data-picker="${variant.color_picker}" data-labelimage="${variant.image_url}">
                <input class="cl-color-checkbox" data-color="${variant.custom_color_name}" type="checkbox" id="upsell-patch-color-${variant.custom_color_name}" name="color-option">
                <label class="color-swatch_bundle rounded-full${class_labelactive}" for="upsell-patch-color-${variant.custom_color_name}" data-option-value="${variant.custom_color_name}" style="background-color:${variant.color_picker}"></label>
              </div>
            </div>`;
          }
          htmlcustomlabel += `${loophtmlcustomlable}</div>
                </div>
                <button type='button' class='cl-color-next-btn'>
                  <img src='https://kjmbqc5060wi7n6e-79637807400.shopifypreview.com/cdn/shop/t/42/assets/carousel-right.png' />
                </button>
              </div>
            </div>`;
        }

        let existingModal_personalised = document.querySelector('#personalized-bundle-template-popup');
        if (existingModal_personalised) existingModal_personalised.remove();
        let existingModal = document.querySelector('#simple-bundle-template-popup');
        if (existingModal) existingModal.remove();

        const modal = document.createElement('x-modal');
        modal.setAttribute('data-product-id', product_id);
        modal.setAttribute('id', 'personalized-bundle-template-popup');
        modal.setAttribute('class', 'modal modal--lg modal-app-ezy');
        modal.setAttribute('role', 'dialog');
        modal.setAttribute('aria-modal', 'true');
        modal.setAttribute('open', '');
        modal.setAttribute('style', 'display: block; opacity: 1;');

        const content = `<div class="popup-content-wrapper">
          <div class="popupcontent">
            <div class="row-cust">
              <div class="first-column-wrapper">
                <div class="column-cust first-column imageoverlay test">
                  <img src="${matchedImageUrl}" data-zoom="${matchedImageUrl}" width="100%" height="100%" style="display:none;">
                  <canvas id="myCanvas" width="2048" height="2048" style="display: block; max-width: 700px;"></canvas>
                </div>
              </div>
              <div class="second-column-wrapper">
                <div class="customizer container">
                  <div class="banner"><b>CHOOSE YOUR COMBINATION</b></div>
                </div>
                <div class="product-ttl-and-btn">
                  <h2 class="product-title Barlow-Medium h3 Barlow-Medium dfs-22 mfs-22">${product_all.product_title}</h2>
                  <div class="popupclose-cancel-section">
                    <button type="button" aria-label="popup close button btn-cancel-custom" id="popupclose-closed">x</button>
                  </div>
                </div>
                <div class="product-info__block-itempopup">
                  <div class="h-stack gap-1"><legend class="Barlow-Medium letter-spacing-md">Product Colourway</legend></div>
                  <div data-option-selector="" class="variant-picker__option-values h-stack gap-4 wrap">${sizeOptionHtmlcolor}</div>
                  <div data-option-selector="" class="h-stack gap-2.5 wrap sizes_customlabel">${sizeOptionHtmlsizes}</div>
                  <div>${htmlcustomlabel}</div>
                  <div class="cl-text-input-wrapper" style="display: grid; gap: 8px;">
                    <input type="text" id="cl-custom-text" name="properties[Custom Text]" placeholder="Enter text (Max. 12 characters)" maxlength="12" required="" style="text-transform:uppercase">
                    <input type="text" id="cl-phone-number" name="properties[Phone Number]" placeholder="Phone number (Optional)" maxlength="12" pattern="[0-9 ]*" style="text-transform:uppercase" required="true">
                  </div>
                </div>
                <p style="color: #4f4e4e; font-size: 15px;">
                  <span class="red-text">LABELS ARE SOLD IN SETS OF 2</span> - One label attaches securely to each side of the Harness or Backpack with hook and loop.
                </p>
                <div id="button-wrapper_new" class="button-wrapper1" style="display: flex; align-items: center; margin-top: 28px; gap: 8px;">
                  <button class="button btn-cancel-custom" id="popupclose-cancel" style="background-color: black; border-color: black;">Cancel</button>
                  <button id="upsell-patch_new_custom" class="d-block button button-" data-class="${classelement}" style="margin-top: 0px;width: 100%;">
                    <span id="add-patch-text_new" class="add-text-">ADD TO BUNDLE</span>
                  </button>
                </div>
                <div class="dsk-notice" style="color: #4f4e4e; padding-top: 13px;">
                  <span class="red-text">IMPORTANT!</span>
                  <ul type="none" style="margin-inline-start: 0; line-height: 1.75;">
                    <li>- Please check your text carefully as Personalised Labels cannot be returned.</li>
                    <li>- Labels can be a combination of Letters and Numbers only.</li>
                    <li>- Shorter names we be enlarged to suit space available on labels.</li>
                    <li>- EzyDog reserves the right to refuse any text choices deemed offensive or inappropriate.</li>
                    <li>- Please allow 2 business days for orders containing Personalised Labels to be processed and shipped.</li>
                  </ul>
                </div>
              </div>
            </div>
            <div class="mbl-notice" style="color: #5a5a5a; margin-top: -28px;">
              <span class="red-text">IMPORTANT!</span>
              <ul type="none" style="margin-inline-start: 0; line-height: 1.75;">
                <li>- Please check your text carefully as Personalised Labels cannot be returned.</li>
                <li>- Labels can be a combination of Letters and Numbers only.</li>
                <li>- Shorter names we be enlarged to suit space available on labels.</li>
                <li>- EzyDog reserves the right to refuse any text choices deemed offensive or inappropriate.</li>
                <li>- Please allow 2 business days for orders containing Personalised Labels to be processed and shipped.</li>
              </ul>
            </div>
          </div>
        </div>`;

        modal.innerHTML += content;
        document.body.appendChild(modal);

        const bundlepopupcancle = document.querySelector('.btn-cancel-custom');
        const bundlepopupcclosed = document.querySelector('#popupclose-closed');
        if (bundlepopupcancle) {
          bundlepopupcancle.addEventListener('click', function () {
            const bundlepopup = document.querySelector('#personalized-bundle-template-popup');
            bundlepopup.remove();
          });
        }
        if (bundlepopupcclosed) {
          bundlepopupcclosed.addEventListener('click', function () {
            const bundlepopupclosed = document.querySelector('#personalized-bundle-template-popup');
            bundlepopupclosed.remove();
          });
        }

        matchedimageurl(product_all, prduct_sizes, prduct_color);
        customSlider();
        const debouncedUpdateCanvastext = debounce(updateCanvastext, 600);
        $("#cl-custom-text").on('keyup', debouncedUpdateCanvastext);
        $("#cl-phone-number").on('keyup', debouncedUpdateCanvastext);

        const clCustomPhoneInput = document.getElementById('cl-phone-number');
        clCustomPhoneInput.addEventListener('input', function (e) {
          this.value = this.value.replace(/[^0-9 ]/g, '');
        });
      });

      let overlayImageUrl = '';
      let img = null;
      let overlayImg = null;
      let START_X = 0;
      let START_Y = 0;

      function handleImageUrl() {
        const imageUrl = $('.imageoverlay img').attr('src');
        overlayImageUrl = $('#slicesslider .loadimage-active').attr('data-labelimage');
        const overlayText = document.getElementById('cl-custom-text').value;
        const overlayNumber = document.getElementById('cl-phone-number').value;

        if (imageUrl) {
          img = new Image();
          img.crossOrigin = 'Anonymous';
          img.onload = function() {
            const canvas = document.getElementById('myCanvas');
            const ctx = canvas.getContext('2d');
            canvas.width = img.width;
            canvas.height = img.height;
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.drawImage(img, 0, 0);
            overlayImg = new Image();
            overlayImg.crossOrigin = 'Anonymous';
            overlayImg.onload = function() {
              drawOverlayImage(ctx, overlayImg, canvas.width, canvas.height);
              drawTextOnCanvas(ctx, overlayText, overlayNumber, canvas.width, canvas.height);
              extractTextFromCanvas(canvas);
            };
            overlayImg.src = overlayImageUrl;
          };
          img.src = imageUrl;
        } else {
          console.error('Image URL is not available.');
        }
      }

      function drawOverlayImage(ctx, overlayImg, canvasWidth, canvasHeight) {
        const targetColor1 = { r: 103, g: 154, b: 96 };
        const targetColor2 = { r: 86, g: 252, b: 244 };
        const tolerance = 20;
        const tempCanvas = document.createElement('canvas');
        const tempCtx = tempCanvas.getContext('2d');
        tempCanvas.width = canvasWidth;
        tempCanvas.height = canvasHeight
          tempCtx.drawImage(img, 0, 0);

          const imageData = tempCtx.getImageData(0, 0, canvasWidth, canvasHeight);
          const data = imageData.data;

          let totalX = 0,
              totalY = 0,
              count = 0;

          function findColor(targetColor) {
              totalX = 0;
              totalY = 0;
              count = 0;

              for (let y = 0; y < canvasHeight; y++) {
                  for (let x = 0; x < canvasWidth; x++) {
                      const index = (y * canvasWidth + x) * 4;
                      const r = data[index];
                      const g = data[index + 1];
                      const b = data[index + 2];

                      if (Math.abs(r - targetColor.r) < tolerance &&
                          Math.abs(g - targetColor.g) < tolerance &&
                          Math.abs(b - targetColor.b) < tolerance) {
                          totalX += x;
                          totalY += y;
                          count++;
                      }
                  }
              }
          }

          findColor(targetColor1);

          // console.log(count);

          if (count === 0 || (count > 65 && count < 100)) {
              findColor(targetColor2);
          }

          if (count > 0) {
              const centerX = totalX / count;
              const centerY = totalY / count;
              const startX = centerX - (overlayImg.width / 2.1);
              const startY = centerY - (overlayImg.height / 2.6);
              START_X = startX;
              START_Y = startY;
              ctx.drawImage(overlayImg, startX, startY, overlayImg.width, overlayImg.height);
          } else {
              console.error('Neither target color was found in the image.');
          }
      }

      function drawTextOnCanvas(ctx, text, number, canvasWidth, canvasHeight) {
          ctx.fillStyle = 'white';
          ctx.textAlign = 'center';
          let fontSize = number && text ? 70 : 80;

          function fitText(text, number, maxWidth, maxHeight) {
              const decrement = 0.7;
              const fixedDecrement = 10;

              let customTextLength = document.querySelector("#cl-custom-text").value;
              let customPhoneLength = document.querySelector("#cl-phone-number").value;

              if (overlayImg.width >= 200 && overlayImg.width < 300) {
                  if (text && number) {
                    fontSize = 23;
                  } else if ((text && !number) && customTextLength.length < 7) {
                    fontSize = 35;
                  } else if ((!text && number) && customPhoneLength.length < 7) {
                    fontSize = 35;
                  } else {
                    fontSize = 23;
                  }
              }
      
              if (overlayImg.width >= 300 && overlayImg.width < 400) {
                  if (text && number) {
                    fontSize = 35;
                  } else if ((text && !number) && customTextLength.length < 7) {
                    fontSize = 55;
                  } else if ((!text && number) && customPhoneLength.length < 7) {
                    fontSize = 55;
                  } else {
                    fontSize = 35;
                  }
              }
      
              if (overlayImg.width >= 400 && overlayImg.width < 500) {
                  if (text && number) {
                    fontSize = 40;
                  } else if ((text && !number) && customTextLength.length < 7) {
                    fontSize = 60;
                  } else if ((!text && number) && customPhoneLength.length < 7) {
                    fontSize = 60;
                  } else {
                    fontSize = 40;
                  }
              }
      
              if (overlayImg.width >= 500 && overlayImg.width < 600) {
                  if (text && number) {
                    fontSize = 60;
                  } else if ((text && !number) && customTextLength.length < 7) {
                    fontSize = 85;
                  } else if ((!text && number) && customPhoneLength.length < 7) {
                    fontSize = 85;
                  } else {
                    fontSize = 60;
                  }
              }
      
              if (overlayImg.width >= 700 && overlayImg.width < 800) {
                  if (text && number) {
                    fontSize = 80;
                  } else if ((text && !number) && customTextLength.length < 7) {
                    fontSize = 115;
                  } else if ((!text && number) && customPhoneLength.length < 7) {
                    fontSize = 115;
                  } else {
                    fontSize = 80;
                  }
              }

              if (text && number) {
                  fontSize *= 0.9;
              }

              ctx.font = `bold ${fontSize}px Arial`;
          }

          let overlayWidth = overlayImg.width;
          let overlayHeight = overlayImg.height;
          fitText(text, number, overlayWidth, overlayHeight);

          let textX = START_X + (overlayImg ? overlayImg.width / 2 : 0);
          let textY, numberY;

          if (number && text) {
              textY = START_Y + overlayHeight * 0.45;
              numberY = textY + fontSize;
          } else if (text) {
              textY = START_Y + overlayHeight * 0.45 + fontSize / 2;
              numberY = null;
          } else if (number) {
              textY = null;
              numberY = START_Y + overlayHeight * 0.45 + fontSize / 2;
          }

          if (text) {
              ctx.fillText(text.toUpperCase(), textX, textY);
          }
          if (number) {
              ctx.fillText(number, textX, numberY);
          }
      }

      function updateCanvas() {
          $('#myCanvas').css('display', 'block');
          handleImageUrl();
          $('.imageoverlay').find('img').css('display', 'none');
      }

      let worker;
      async function initializeWorker() {
          if (!worker) {
              worker = Tesseract.createWorker();
              await worker.load();
              await worker.loadLanguage('eng');
              await worker.initialize('eng');
          }
      }

      async function extractTextFromCanvas(canvas) {
          try {
              if (!worker) {
                  await initializeWorker(); // Ensure the worker is initialized
              }
              const { data: { text } } = await worker.recognize(canvas);
              // Handle the extracted text as needed
          } catch (err) {
              console.error('Error during OCR:', err);
          }
      }

      window.addEventListener('beforeunload', () => {
        if (worker) {
          worker.terminate();
          worker = null;
        }
      });

      // Function to update the canvas with the custom text and number, and then trigger OCR
      function updateCanvastext() { 
          const canvas = document.getElementById('myCanvas');
          const ctx = canvas.getContext('2d');
          const overlayText = document.getElementById('cl-custom-text').value;
          const overlayNumber = document.getElementById('cl-phone-number').value;
        
          $('#myCanvas').css('display', 'block');
          
          if (img && overlayImg) {
              ctx.clearRect(0, 0, canvas.width, canvas.height);
              ctx.drawImage(img, 0, 0);
              drawOverlayImage(ctx, overlayImg, canvas.width, canvas.height);
              drawTextOnCanvas(ctx, overlayText, overlayNumber, canvas.width, canvas.height);
              // Debounced call to Tesseract OCR
              extractTextFromCanvas(canvas);
          }
      }

      // Debounce function in plain JavaScript
      function debounce(func, wait) {
          let timeout;
          return function executedFunction(...args) {
              const later = () => {
                  clearTimeout(timeout);
                  func(...args);
              };
              clearTimeout(timeout);
              timeout = setTimeout(later, wait);
          };
      }

      $('body').on('click', '.color-varient-switch label.color-swatch', async function(event) {
        event.preventDefault();
        var classelement=$(this).parent('.color-varient-switch').attr('class').replace('color-varient-switch', '').trim();
      
        let product_id = $('#product-customize-button').attr('data-id'); 
        var product_all = products_new[product_id];
        let colorval = $(this).attr('data-option-value');
        let sizesval = $('variant-picker__option-values .color-varient-switch .colourway-active').attr('data-option-value');
        $('.variant-picker__option-values .color-varient-switch .colourway-active').removeClass('colourway-active');
        $(this).addClass('colourway-active');
        
        matchedimageurl(product_all,sizesval,colorval);
        var $labelCollectionDetails = $labelCollectionDetails_new[product_id];
        const products_sizes = [{{ array_bundleoption_main_sizes }}]; 
        const filteredProducts_sizes = products_sizes.filter(products_sizes =>products_sizes.includes(classelement) && products_sizes.includes(product_id));
        
        let sizes = new Set(); // To avoid duplicate sizes
        let sizes_array ='false';
        let sizeOptionHtmlsizes = ``;
        let isFirstOptionSizes = true;
        if($labelCollectionDetails){
          $labelCollectionDetails.variants.forEach(variant => {
            if (variant.option2 && !sizes.has(variant.option2)) {
              sizes.add(variant.option2);
              
              if(filteredProducts_sizes.length > 0){ 
                const sizesmatched = filteredProducts_sizes.filter(products_size => {
                  // Split by underscore to isolate parts
                  const parts = products_size.split('_');

                  // Get the last part (color) and the second-to-last part (size)
                  const colorMatch = parts[parts.length - 1] === colorval;
                  const sizeMatch = parts[parts.length - 2] === variant.option2;

                  // Return true only if both the size and color match exactly
                  return sizeMatch && colorMatch;
                });           
                // var sizesmatched = filteredProducts_sizes.filter(filteredProducts_sizes => filteredProducts_sizes === variant.option2);
                            
                if (sizesmatched.length > 0) {
                  sizesmatches= 'style="display:block;"';
                } else {
                  sizesmatches=  'style="display:none;"';
                } 
              } else {
                sizesmatches=  'style="display:block;"';
              }
              // Track first visible swatch
              let selectedAttrSize = ''; // Default to no active class
                      
            // Only count the first element with display:block
              if (sizesmatches === 'style="display:block;"' && isFirstOptionSizes == true) {
                prduct_sizes = variant.option2;
            
                selectedAttrSize = ' colourwaytext-active' ;
                isFirstOptionSizes = false; // Set the flag to false after the first visible swatch is found
                // You can add any counting logic here if needed
              }

              sizeOptionHtmlsizes +=` <div class="vareint-sizes" ${sizesmatches}>
                                    <input class="sr-only" type="radio" name="option2" value="${variant.option2}">
                                      <label class="block-swatch block-swatchsize-${variant.option2} ${selectedAttrSize}" data-option-value="${variant.option2}">          
                                          <span>${variant.option2}</span>
                                        </label>
                                    </div>`;

              
            }
          });
        
          $('.product-info__block-itempopup .sizes_customlabel').html(sizeOptionHtmlsizes);
        } 
      });

      $('body').on('click', '.h-stack .vareint-sizes .block-swatch', async function(event) {           
        $('.h-stack .vareint-sizes .colourwaytext-active').removeClass('colourwaytext-active');
        $(this).addClass('colourwaytext-active');
      });

      $('body').on('click', '#slicesslider .loadImage', function(event) {
        event.preventDefault();
        let imageslabel = $(this).attr('data-labelimage');
        let product_id = $('#product-customize-button').attr('data-id'); 
        $('#slicesslider .loadImage .color-swatch-active').removeClass('color-swatch-active');
        $(this).find('label').addClass('color-swatch-active');
        $('#slicesslider .loadImage').removeClass('loadimage-active');
        $(this).addClass('loadimage-active')
        var product_all = products_new[product_id];
        let colorval = $('.color-varient-switch label.colourway-active').attr('data-option-value');
        let sizesval = $('variant-picker__option-values .color-varient-switch .colourway-active').attr('data-option-value');
      
        matchedimageurl(product_all,sizesval,colorval);
      });

      async function matchedimageurl(product_all, sizeName=null, colorval){
        const debouncedUpdateCanvas = debounce(updateCanvas, 1000); // Debounced version of updateCanvas
        let matchedImageUrl='';
        if (product_all && product_all.image_varients) {
          // Iterate over the keys in the image_varients object
          for (let key in product_all.image_varients) {
            if (product_all.image_varients.hasOwnProperty(key)) {
              let variant = product_all.image_varients[key];
              // Check if the image_name_downcase matches the targetName
              if (variant.image_name_downcase === colorval) {
                matchedImageUrl = variant.image_url; // Retrieve the corresponding image_url
                break; // Exit the loop once we find a match
              }
            }
          }
        }

        if (matchedImageUrl) {
          matchedImageUrl = matchedImageUrl;
        } else {
          let filteredProducts =filterProductsBySizeColorAndId(product_all, sizeName, colorval);
          matchedImageUrl = filteredProducts[0].varient_image;
        }

        $('.popup-content-wrapper .imageoverlay img').attr('src',matchedImageUrl);

        await debouncedUpdateCanvas(); // Use debounced version of updateCanvas
        }
        
        $(document).on('click','#upsell-patch_new_custom',function(event){
          event.preventDefault();
          
          const product_id = String($('#personalized-bundle-template-popup').data('product-id')).trim();
          const colorval = $('.color-varient-switch label.colourway-active').attr('data-option-value');
          const sizeval = $('.h-stack .vareint-sizes .colourwaytext-active').attr('data-option-value');
          const patchedcolor = $('#slicesslider .loadimage-active').find('label').attr('data-option-value');
          const phonenumber = $('input#cl-phone-number').val();
          const text = $('input#cl-custom-text')[0];
          
          if (text.value.trim() === '') {
            text.reportValidity(); 
            text.focus();
            return true;
          }

          const filtervarient = filterProductsBySizeColorAndId(product_id, sizeval, colorval);
          if (!filtervarient[0]) {
            console.error('No matching variant found');
            return;
          }

          const p_title = filtervarient[0].variant_title || filtervarient[0].product_title;
          const p_id = filtervarient[0].variant_id || product_id;
          const p_price = (parsePrice(filtervarient[0].varient_price || filtervarient[0].product_prices) * 0.9);

          const Ids = ["8785901682984", "8785890935080", "8785900044584", "8785898307880"];
          const id_Select = $(".product-info__block-item[data-block-type=variant-picker]").find("select[name=id]");
          
          if (Ids.includes(product_id) && id_Select.length) {
            // console.log("Product ID is in the array");
            
            const $option = id_Select.find(`option[data-option="${sizeval}"]`);
            // console.log('Variant option:', $option);
            
            if ($option.length) {
              const price = parseFloat($option.data('price'));
              const compare = $option.data('compare');
              
              // console.log("Updating prices:", { price, compare });
              
              $('.product-info__block-item[data-block-type="price"] sale-price').text(`$${price.toFixed(2)}`);
              if (compare && compare > price) {
                $('.product-info__block-item[data-block-type="price"] compare-at-price').show().text(`$${parseFloat(compare).toFixed(2)}`);
              } else {
                $('.product-info__block-item[data-block-type="price"] compare-at-price').hide();
              }
              
              id_Select.val($option.val()).trigger('change');
            } else {
              console.warn('No matching variant option found for size:', sizeval);
            }
          }

          const bundlepopup = document.querySelector('#personalized-bundle-template-popup');
          bundlepopup.remove();

          const classelemtns = $(this).attr('data-class'); 
          $('#crard-show_'+classelemtns).remove();
          $('#crard-show_labels_'+classelemtns).remove();
          
          let html_patchedcolor = '';
          let varient_prices = 0;
          
          const mappingObjectnew = window.mappingnew.find(mappingnew => 
            mappingnew.ids.includes(parseInt(product_id))
          );
          
          if (mappingObjectnew) {
            const mappingnew = mappingObjectnew.mappingnew[sizeval];
            const $matchingPatchVariant_new = $personalizedVariantsr.filter(item => 
              item.option1.toLowerCase() === patchedcolor && 
              item.option2.toLowerCase() === mappingnew.patch.toLowerCase()
            )[0];

            if ($matchingPatchVariant_new && $matchingPatchVariant_new.available) {
              varient_prices = parsePrice($matchingPatchVariant_new.price);
              
              html_patchedcolor = `
                <div class="crard-show-personalized row" id="crard-show_labels_${classelemtns}" data-id="${$matchingPatchVariant_new.id}">
                  <div class="container">
                    <div class="col-first">
                      <figure>
                        <img id="image-product" src="${$matchingPatchVariant_new.featured_image.src}" width="100px" height="100px">
                      </figure>
                    </div>
                    <div class="col-second">
                      <h3>Personalised Labels</h3>
                      <span class="color-p">${$matchingPatchVariant_new.title}</span>
                      <span class="price-display">$${varient_prices.toFixed(2)}</span>
                      <div class="messages">
                        <h3>Message</h3>
                        <span class="messages-text">${text.value.toUpperCase()}</span>
                        <span class="messages-phonenumber">${phonenumber}</span>
                      </div>
                    </div>
                  </div>
                </div>`;
            }
          }

          const apendbundlehtml = `
            <div class="crard-show card-show_personalised row" id="crard-show_${classelemtns}" data-id="${p_id}">
              <div class="container">
                <div class="col-first">
                  <figure>
                    <img id="image-product" src="${filtervarient[0].varient_image}" width="100px" height="100px">
                  </figure>
                </div>
                <div class="col-second">
                  <h3>${filtervarient[0].product_title}</h3>
                  <span>${filtervarient[0].variant_title}</span>
                  <span class="price-display">$${(parsePrice(filtervarient[0].varient_price || filtervarient[0].product_prices)).toFixed(2)}</span>
                </div>
              </div>
              <button type="button" class="card-close-button-personalised" data-class_element="${classelemtns}">
                <svg aria-hidden="true" focusable="false" fill="none" width="14" class="icon icon-close" viewBox="0 0 16 16">
                  <path d="m1 1 14 14M1 15 15 1" stroke="currentColor" stroke-width="1.5"></path>
                </svg>
              </button>
            </div>
          ${html_patchedcolor}`;

          $('.'+classelemtns).append(apendbundlehtml);
          $('#customizes-btn').remove();
          $('.'+classelemtns+' .cl-accordion-label-customise span#label-select-text').text(filtervarient[0].product_title);

          updateBundlePriceDisplay();
        });

        $('.buy-buttons-simplebundle').click(function(){
          setTimeout(function(){
            const labels = document.querySelectorAll('.accordion.cl-accordion-label-customise.group #label-select-text');
            if (labels.length > 0) {
              labels.forEach(label => {
                label.textContent = 'Choose Product';
              });
            } else {
              console.log('No labels found to update');
            }
            if ($('sale-price span#product-price').length || $('sale-price').length) {
              $('sale-price span#product-price').text('$0.00');
              $('sale-price').text('$0.00');
            } else {
              console.warn('sale-price element not found');
            }

            if ($('compare-at-price').length) {
              $('compare-at-price').text('$0.00');
            } else {
              console.warn('compare-at-price element not found');
            }
            // updateBundlePriceDisplay(); // Recalculate button state
          }, 500);
        });
      });
  </script>

  <style>
    #simple-bundle-template-popup{
    --modal-body-max-width: 70%;
    }
    #personalized-bundle-template-popup{
        --modal-body-max-width: 70%;
    }
    .popup-content-wrapper {
      padding: 28px;
      position: relative;
      z-index: 1000000000001;
      background: #fff;
      width: 100%;
      min-width: 1200px;
      height: 100%;
      }
    .popupcontent {
      height: 100%;
      position: relative;
    }
    .row-cust {
      display: grid;
      grid-template-columns: auto 600px;
      gap: 32px;
      height: 100%;
    }
    .column-cust.first-column {
      background: #f8f8f8;
      border: 1px solid rgba(0, 0, 0, 0.08);
    }
    .second-column .customizer {
      margin: 0;
      border-radius: 6px;
      overflow: hidden;
      margin-bottom: 17px;
    }
    .second-column .customizer .banner {
      background-color: #939598;
      color: rgb(255, 255, 255);
      display: flex;   justify-content: center;
      align-items: center;
      column-gap: 8px;
      padding-top: 16px;
      padding-bottom: 16px;
    }
    .cl-color-selector-wrapper {
      padding-top: 12px !important;
      padding-bottom: 20px;
      display: flex;
      align-items: center;
      gap: 12px;
    }
    .cl-color-selector {
      display: flex;
      gap: 10px;
    }
    .color-option_silder1 {
      display: flex;
      align-items: center;
      gap: 0 !important;
      height: 35px !important;
      width: 350px;
      transition: all 300ms ease-in-out;
    }
    .color-option_silder1 .cl-color-checkboxnew {
      margin-right: 8px;
      margin-left: 8px;
    }
    .cl-color-checkbox {
      display: none;
    }
    #simple-bundle-template-popup .cl-color-selector .cl-color-checkboxnew .color-swatch,#simple-bundle-template-popup .cl-color-selector .cl-color-checkboxnew .color-swatch_bundle{
      width: 28px !important;
      height: 28px !important;
    }
    .first-product-slect label{display:grid !important;}

    .color-swatch-active {
      outline: 1px solid #1a1a1a !important;
      outline-offset: 3px !important;
      scale: 0.9 !important;
    }
    .product-customize-btn {
      position: relative;
      border-radius: 6px;
      border: 0 solid;
      cursor: pointer;
      padding: 2px;
      display: inline-block;
      text-transform: uppercase;
      text-decoration: none;
      background: linear-gradient(43deg, #57d5d0, #f46b65 46%, #ee2d25);
      transition: background .3s ease-in-out;
      width: 100%;
      height: 45px;
      display: flex;
      align-items: stretch;
      justify-content: center;
      margin-right: 16px;
      margin: 25px 0;
    }
    .customize-tile {
      background-color: #fff;
      border-radius: 4px;
      font-family: var(--font-heading-family);
      color: #0070ad;
      font-weight: 900;
      letter-spacing: .65px;
      white-space: nowrap;
      line-height: 1.69;
      text-transform: uppercase;
      text-decoration: none;
      display: flex;
      align-items: center;
      width: 100%;
      justify-content: center;
      font-size: 13px;
      color: #002b45;
    }
    .colourway-active {
      outline: 1px solid #1a1a1a !important;
      outline-offset: 3px !important;
      scale: 0.9 !important;
    }
    .colourwaytext-active {
      --swatch-disabled-strike-color: unset;
      color: #fff;
      border-color: #ea2d24;
      background: #ea2d24;
    }
    .color-swatch_bundle{
        --swatch-offset: 2px;
      --swatch-size: 2.125rem;
      --swatch-border-size: 1px;
      --swatch-disabled-strike-color: rgb(var(--border-color));
      width: var(--swatch-size);
      height: var(--swatch-size);
      padding: var(--swatch-offset);
      border: var(--swatch-border-size) solid transparent;
      background: content-box var(--swatch-background) no-repeat center / cover;
      place-items: center;
      display: grid;
      position: relative;
      border-radius: 50%;

    }

    .price-display{
      display: block; 
      font-weight: 600;
    }
    
      #slicesslider .colorbundle-orange{background-color:#eb4627;}
      #slicesslider .colorbundle-aqua{background-color:#178594;}
     #slicesslider .colorbundle-navy{background-color:#262b5e;}
      #slicesslider .colorbundle-charcoal{background-color:#474747;}
      #slicesslider .colorbundle-blue{background-color:#123965 !important;}
     #slicesslider .colorbundle-black{background-color:#030303;}
    #slicesslider .colorbundle-purple{background-color:#480f78;}
      #slicesslider .colorbundle-pink{background-color:#ed1e8e;}
     #slicesslider .colorbundle-brown{background-color:#6f3f2f;}
     #slicesslider .colorbundle-red{background-color:#ed0a09;}
  </style>

  <script>
    function customSlider() {
      const $colorSelector = $('.color-option_silder1'); 
      const $prevBtn = $('.cl-color-prev-btn');
      const $nextBtn = $('.cl-color-next-btn');
      const $wrapper = $('.cl-color-selector');
      const moveAmount = 44; 
      let currentPosition = 0;
      let isDragging = false;
      let startX;
      let scrollLeft;

      function initializeSlider() {
          if ($colorSelector.length > 0 && $prevBtn.length > 0 && $nextBtn.length > 0 && $wrapper.length > 0) {
              const maxScrollLeft = $colorSelector[0].scrollWidth - $colorSelector.outerWidth();

              $prevBtn.click(function() {
                  if (currentPosition > 0) {
                      currentPosition -= moveAmount;
                      if (currentPosition < 0) {
                          currentPosition = 0;
                      }
                      $colorSelector.css('transform', `translateX(-${currentPosition}px)`);
                  }
              });

              $nextBtn.click(function() {
                  if (currentPosition < maxScrollLeft) {
                      currentPosition += moveAmount;
                      if (currentPosition > maxScrollLeft) {
                          currentPosition = maxScrollLeft;
                      }
                      $colorSelector.css('transform', `translateX(-${currentPosition}px)`);
                  }
              });

              // Mouse down and touch start event to begin dragging
              $wrapper.on('mousedown touchstart', function (e) {
                  isDragging = true;
                  startX = e.pageX || e.originalEvent.touches[0].pageX - $wrapper.offset().left;
                  scrollLeft = $wrapper.scrollLeft();
                  $wrapper.addClass('active'); // Add a class to indicate active dragging
              });

              // Mouse leave, mouse up, and touch end events to end dragging
              $wrapper.on('mouseleave mouseup touchend', function () {
                  if (isDragging) {
                      isDragging = false;
                      $wrapper.removeClass('active');
                      snapToItem(); // Snap to the nearest item
                  }
              });

              // Mouse move and touch move event to handle dragging
              $wrapper.on('mousemove touchmove', function (e) {
                  if (!isDragging) return;
                  e.preventDefault();
                  const x = e.pageX || e.originalEvent.touches[0].pageX - $wrapper.offset().left;
                  const walk = (x - startX) * 2; // Scroll-fast multiplier
                  $wrapper.scrollLeft(scrollLeft - walk);
              });

              // Handle mouse up globally to stop dragging
              $(window).on('mouseup touchend', function () {
                  if (isDragging) {
                      isDragging = false;
                      $wrapper.removeClass('active');
                      snapToItem(); // Snap to the nearest item
                  }
              });

              // Snap to the nearest item after dragging ends
              function snapToItem() {
                  let scrollPos = $wrapper.scrollLeft();
                  let itemIndex = Math.round(scrollPos / moveAmount);
                  let newScrollPos = itemIndex * moveAmount;
                  $wrapper.animate({ scrollLeft: newScrollPos }, 200);
              }
          } else {
              console.error('Color selector elements not found!');
          }
      }

      $(document).ready(function(){
          // For dynamically loaded elements
          const observer = new MutationObserver(function(mutationsList, observer) {
              for (const mutation of mutationsList) {
                  if (mutation.type === 'childList' || mutation.type === 'attributes') {
                      initializeSlider(); 
                  }
              }
          });

          // Start observing the target node for configured mutations
          observer.observe(document.body, { childList: true, subtree: true, attributes: true });
          // For elements that are present on DOM ready
          initializeSlider();
      });

    
    }
  </script>
{% endif %}
