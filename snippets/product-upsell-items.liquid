
<!-- product-upsell-items -->
{% assign swatches = settings.color_swatch_config | split: ' ' %}
{% assign swatchObjects = '' %}
{% for swatch in swatches %}
  {% assign parts = swatch | split: ':' %}
  {% if swatchObjects != '' %}
    {% assign swatchObjects = swatchObjects | append: ',' %}
  {% endif %}
  {% assign swatchObject = '"\"' | append: parts[0] | append: '\"":"' | append: parts[1] | file_url | append: '"' %}
  {% assign swatchObjects = swatchObjects | append: swatchObject %}
{% endfor %}

{% capture customise_content %}
  {% if block.settings.inner_heading != blank %}
    <h3 class="Barlow-Medium dfs-20 mfs-20" style="border-bottom: 1px solid #6A6A6A;">{{ block.settings.inner_heading }}</h3>
  {% endif %}
    {% comment %} <input type="hidden" name="id" value="{{ product.variants.first.id }}" /> {% endcomment %}
    {% comment %} <input type="hidden" name="size" value="{{ product.variants.first.id }}" /> {% endcomment %}
    <div> 
     
      <div class="cl-color-wrapper">
         <div class="cl-color-selector" id="color-options">
       

{%- assign variant_array = '' -%}

{% assign product_image_custom_label = product.metafields.custom.custom_vareint_image.value %}
{% assign item_count = 0 %}

<!-- Loop through to count items -->
{% for color_match in product_image_custom_label %}
  {% assign item_count = item_count | plus: 1 %}
{% endfor %}


         
{% assign color_image_array = "" %}  
{% assign item_index = 0 %} <!-- Initialize the item index -->
{% for color_match in product_image_custom_label %}
 

  {% assign color_in = color_match.custom_color.value | parse_json %}

{% assign custom_color_name=color_in.custom_color_name | downcase | replace: ' ', ''  %}


      {% assign image_value = color_match.image.value | img_url: 'master' %}
       {% assign item_index = item_index | plus: 1 %} <!-- Increment the index -->

     {% assign color_image_array = color_image_array | append: '{"color_name": "' | append: custom_color_name | append: '", "image": "' | append: image_value | append: '"}' %}
   {% if item_index < item_count %} 
    {% assign color_image_array = color_image_array | append: ',' %}
  {% endif %}

{% endfor %}

{%- if product.metafields.custom.custom_lebel_color -%}
  {%- assign meta_obj = product.metafields.custom.custom_lebel_color.value -%}
{%- else -%}
  {%- assign meta_obj = shop.metaobjects.custom_lebel_color.values -%}
{%- endif -%}

{%- for meta_objlist in meta_obj -%}
  {%- assign variant_obj = '' -%}
  
  {%- if meta_objlist.color_image.value -%}
   
       {%- assign color_image = meta_objlist.color_image.value | img_url: 'master' -%}
    {%- assign variant_obj = variant_obj | append: '"color_image": "' | append: color_image | append: '",' -%}
  {%- endif -%}

  {%- if meta_objlist.color_image_lebel.value -%}
      {%- assign color_image_lebel = meta_objlist.color_image_lebel.value | img_url: 'master' -%}
    {%- assign variant_obj = variant_obj | append: '"color_image_lebel": "' | append: color_image_lebel | append: '",' -%}
  {%- endif -%}

  {%- if meta_objlist.color_picker.value -%}
    {%- assign variant_obj = variant_obj | append: '"color_picker": "' | append: meta_objlist.color_picker.value | append: '",' -%}
  {%- endif -%}

  {%- if meta_objlist.color_product_custom_vareint -%}
    {%- assign productss = meta_objlist.color_product_custom_vareint.value -%}
    {% for productv in productss %}
          {% if forloop.index == 1 %}
              {% assign vprices= productv.price %}
              {% assign varierntsid= productv.id %}
          {% endif %}
        {% endfor %}

      {%- assign variant_obj = variant_obj | append: '"color_product_custom_lebel_vareint": "' | append: varierntsid | append: '",' -%}
      {%- assign variant_obj = variant_obj | append: '"color_product_custom_lebel_vareintprices": "' | append: vprices | append: '",' -%}
    {%- endif -%}


  {%- if meta_objlist.custom_color_name.value -%}
    {%- assign variant_obj = variant_obj | append: '"custom_color_name": "' | append: meta_objlist.custom_color_name.value | append: '"' -%}
  {%- endif -%}

  {%- assign variant_array = variant_array | append: variant_obj | append: ',{}' -%}
{%- endfor -%}



{% assign splitarray = variant_array | split: ',{}' %}
{% assign processed_values = '' %} <!-- Track unique color names -->
 

{% for splitarraylist in splitarray %}
  {% assign key_value_pairs = splitarraylist | split: ',' %}
  {% assign color_picker = '' %}
  {% assign custom_color_name = '' %}
  {% assign color_image_lebel = '' %}
  {% assign color_product_custom_lebel_vareint = '' %}
  {% assign color_product_custom_lebel_vareintprices = '' %}

  {% for pair in key_value_pairs %}
    {% assign key_value = pair | split: ': ' %}
    {% assign key = key_value[0] | remove: '"' %}
    {% assign value = key_value[1] | remove: '"' %}

    {% case key %}
      {% when 'color_picker' %}
        {% assign color_picker = value %}
      {% when 'custom_color_name' %}
        {% assign custom_color_name = value %}
        {%  assign custom_color_name=custom_color_name | downcase | replace: ' ', '' %}
      {% when 'color_image_lebel' %}
        {% assign color_image_lebel = value %}
      {% when 'color_product_custom_lebel_vareint' %}
        {% assign color_product_custom_lebel_vareint = value %}
      {% when 'color_product_custom_lebel_vareintprices' %}
        {% assign color_product_custom_lebel_vareintprices = value %}
    {% endcase %}
  {% endfor %}
 
  {% unless processed_values contains color_picker %}
    
    {% assign processed_values = processed_values | append: color_picker  | append: ',' %}

    <!-- Output the color option -->
    <div class="cl-color-checkboxnew" data-lebelimage="{{ color_image_lebel }}" data-labelvarientid="{{ color_product_custom_lebel_vareint }}" data-labelvarentprices="{{ color_product_custom_lebel_vareintprices }}">
      <input class="cl-color-checkbox" data-color="{{ custom_color_name }}" type="checkbox" id="upsell-patch-color-{{ custom_color_name }}" name="color-option">
      <label class="color-swatch rounded-full" for="upsell-patch-color-{{ custom_color_name }}" data-option-value="{{ custom_color_name }}" style="background-color:{{ color_picker }}"></label>
    </div>
  {% endunless %}
{% endfor %}



         </div>
      {% comment %}  <div class="cl-color-selector" id="color-options">
          {% assign color_values = '' %}
          {% for variant in block.settings.label_product.variants %}
            {% assign color_value = variant.options[0] %} 
            {% assign color_already_exists = false %}
          
            {% if color_values != '' %}
              {% assign color_values_array = color_values | split: ',' %}
              {% for existing_color in color_values_array %}
                {% if existing_color == color_value %}
                  {% assign color_already_exists = true %}
                {% endif %}
              {% endfor %}
            {% endif %}
          
            {% unless color_already_exists %}
              {% if color_values != '' %}
                {% assign color_values = color_values | append: ',' %}
              {% endif %}
              {% assign color_values = color_values | append: color_value %}
              {%- assign swatch_config = settings.color_swatch_config | newline_to_br | split: '<br />' -%}
              {%- assign value_downcase = color_value | downcase | strip %}
          
              {%- for swatch_item in swatch_config %}
                {%- assign swatch_parts = swatch_item | split: ':' %}
                {% assign swatch_name = swatch_parts.first | downcase | strip %}
                {% if value_downcase == swatch_name %}
                  {% assign swatch_value = swatch_parts.last | strip %}
                  {% assign swatch_style = '--swatch-background: ' | append: swatch_value %}
                  {% if images[swatch_value] != blank %}
                    {% assign swatch_image = images[swatch_value] | image_url: width: 72 %}
                    {% assign swatch_style = '--swatch-background: url(' | append: swatch_image | append: ')' %}
                  {% endif %}
          
                  {% break %}
                {% endif %}
              {% endfor %}
              <div>
                <input class="cl-color-checkbox" data-color="{{ color_value }}" type="checkbox" id="upsell-patch-color-{{color_value}}" name="color-option" onchange="handleColourChange(this, 'cl-color-checkbox')">
                <label class="color-swatch rounded-full" for="upsell-patch-color-{{color_value}}" data-option-value="" style="{{ swatch_style }}"></label>  
              </div>
            {% endunless %}
          {% endfor %}
          

        </div>  {% endcomment %}
      </div>
    </div>
    
    <div class="cl-text-input-wrapper " style="display: grid; gap: 8px; margin-bottom: 5px;">
      <input type="text" id="cl-custom-text" name="properties[Custom Text]" placeholder="Enter text (Max. 10 characters)" maxlength="10" required/>
      <input type="number" id="cl-phone-number" name="properties[Phone Number]" placeholder="Phone number (Optional)"  maxlength="10" />
    </div>
       

    {% if block.settings.inner_label_image_black != blank %}
    <div class="relative">
     
      <div class="relative-cards" data-vareintids="" style="height: 250px;" data-colorimage='[{{ color_image_array }}]'>
      <img id="inner-label-img-black" class="inner-label-img w-full" style="margin-top: 18px;" src="//ezydog.com.au/cdn/shop/files/black_patch_ce2e0a9b-c29a-42d2-a754-9b9a909a1e64_400x.jpg?v=1700119967" />
      <!-- <img id="inner-label-img-brown" class="inner-label-img w-full d-none" style="margin-top: 18px;" src="{{ block.settings.inner_label_image_brown | img_url: '400x' }}" />
      <img id="inner-label-img-green" class="inner-label-img w-full d-none" style="margin-top: 18px;" src="{{ block.settings.inner_label_image_green | img_url: '400x' }}" />
      <img id="inner-label-img-formfit-grey" class="inner-label-img w-full d-none" style="margin-top: 18px;" src="{{ block.settings.inner_label_image_formfit_grey | img_url: '800x' }}" /> -->
      </div>
      <div class="patch-text-overlay Helvetica-Neue-Bold" style="letter-spacing: -.12em; font-weight: bold;">
        <span id="label-text-overlay"></span>
        <span id="label-phone-overlay"></span>
      </div>
         <canvas id="canvas" width="600" height="400" style="display:none"></canvas>
    </div>
    {% endif %}

  
    <button id="upsell-patch" class=" d-block button button-choose button-{{product.id}}" data-product-id="{{ product.id }}" onclick="addPatchToOrder(this)">
      <span id="add-patch-text" class="add-text-{{product.id}}">Choose Size</span>
      <div class="loading-{{product.id}} loading-spinner noopacity">{% render 'icon' with 'loader' %}</div>
    </button>

{%  endcapture %}
<div>
  <div id="upsell-wrapper" class="upsell-wrapper no-click">
    <details class="accordion accordion-label-customise {% if size %}accordion--{{ size }}{% endif %} group {% if bleed %}bleed sm:unbleed{% endif %}" is="{{ is | default: 'accordion-disclosure' }}" {% if open %}open aria-expanded="true"{% else %}aria-expanded="false"{% endif %} {{ block.shopify_attributes }} style="display:none;">
      <summary>
        <span class="accordion__toggle ">
  
          {% if product.id != 9018885996840 %}
            {% assign label_image = block.settings.label_image | img_url: '400x' %}
          {% else %}
            {% assign label_image = block.settings.label_image_formfit | img_url: '400x' %}
          {% endif %}
          
          <img id="upsell-main-image" class="upsell-image" src="{{label_image }}" alt="Product Image">
            <span class="Barlow-Medium dfs-14 mfs-14">Customise It + {{ block.settings.label_product.price | money }}</span>
            {%- render 'icon' with 'chevron-down', class: 'group-expanded:rotate' -%}
        </span>
      </summary>
  
      <div class="accordion__content upsell-inner-wrapper {% if prose_content %}prose{% endif %} Open-Sans {{content_class}}">
        {{- customise_content -}}
      </div>
    </details>
   
    <button id="upsell-button-d-ring" class="upsell-button-d-ring relative" data-product-id="{{  block.settings.upsell_item_1.id }}" data-role="add" onclick="triggerDringClick(this)" disabled>
      {% if block.settings.upsell_image_1 != blank %}
        <img class="upsell-image upsell-image-dring"  src="{{ block.settings.upsell_image_1 | img_url: '400x' }}" alt="Product Image">
      {% endif %}
      <span id="add-dring-text" class="dfs-14 mfs-14 add-text-{{ block.settings.upsell_item_1.id}} Barlow-Medium">Add {{  block.settings.upsell_item_1.title }} + {{  block.settings.upsell_item_1.price | money }}</span>
      <div class="loading-{{ block.settings.upsell_item_1.id }} loading-spinner noopacity">{% render 'icon' with 'loader' %}</div>
    </button>
  
  </div>
</div>

<script>  
  // Get mapping from custom.js
  window.mapping.forEach(mapping => {
    mapping.ids.slice(1).forEach(id => {
      $(`.product-select-${id}`).hide();
    });
  });
  
  // Get all the label variants from what is set in admin
  // here is where i should check if id is in the bedding ids
  // ill need fomr logic to handle the type of patch to select against

  $labelProductVariants = [
    {% for variant in all_products[block.settings.label_product].variants %}
      {{ variant | json }}{% unless forloop.last %},{% endunless %}
    {% endfor %}
  ]
  
  $dringVariants = [
    {% for variant in all_products[block.settings.upsell_item_1].variants %}
      {{ variant | json }}{% unless forloop.last %},{% endunless %}
    {% endfor %}
  ]

  let colorSwatches = {
    {% assign swatchConfig = settings.color_swatch_config | newline_to_br | split: '<br />' %}
    {% for item in swatchConfig %}
      {% assign parts = item | split: ':' %}
      {% assign colorName = parts[0] | downcase | strip %}
      {% assign swatchValue = parts[1] | strip %}
      "{{ colorName }}": "{{ swatchValue | file_url }}"{% unless forloop.last %},{% endunless %}
    {% endfor %}
  };

  $selected_patch_colour = "";
  $matchingPatchVariant = "";
  $matchingDringVariant = "";
  $productId = "{{product.id}}";
  $addDring = false;
  $addPatch = false;

  function handleColourChange(checkbox, className){
    var $checkbox = $(checkbox);
    var isChecked = $checkbox.is(':checked');
    $(`input.${className}`).not($checkbox).prop('checked', false);
    $selected_patch_colour = checkbox.getAttribute('data-color');
    findMappedVariants()
    
    $(`.inner-label-img`).addClass('d-none')
    $(`#inner-label-img-${$selected_patch_colour.toLowerCase().replace(' ', '-')}`).removeClass('d-none')
    
    updateAddToCartButton()
  }

  function runButtonLoading(buttonId){
    $(`#${buttonId} span`).addClass('noopacity');
    $(`#${buttonId} .loading-spinner`).removeClass('noopacity');
    $(`#${buttonId}`).prop('disabled', true).addClass('button-disabled');
  }

  function runButtonStopLoading(buttonId){
    $(`#${buttonId} .loading-spinner`).addClass('noopacity');
    $(`#${buttonId} span`).removeClass('noopacity');
    $(`#${buttonId}`).prop('disabled', false).removeClass('button-disabled');;
  }

$(document).ready(function() {
  $('.cl-color-checkboxnew').click(function(event) {
      event.preventDefault(); // Prevent the form from submitting traditionally  data-vareintids
    let labelimage= $(this).attr('data-lebelimage'); 
     let labelvarentprices= $(this).attr('data-labelvarentprices');
    let labelvarientid= $(this).attr('data-labelvarientid');
    let color = $(this).find('.cl-color-checkbox').attr('data-color');
     let datacolor = $('.relative-cards').attr('data-colorimage');

    
    
     $('.relative-cards').attr('data-vareintids',labelvarientid);
    $('.cl-color-selector').find('.color-swatch').removeClass('color-swatch-active');
     $(this).find('.color-swatch').addClass('color-swatch-active').css('border','0');
     $('#upsell-wrapper .relative-cards').html('<img id="inner-label-img-black" class="inner-label-img w-full" style="margin-top: 18px;" src="'+labelimage+'">');
     $(".cl-color-checkboxnew").find('.cl-color-checkbox').prop('checked', false); 
     $(this).find('.cl-color-checkbox').prop('checked', true);
     
   
    var addToCartButton = $('#upsell-patch');
     addToCartButton.prop('disabled', false);
      addToCartButton.removeClass('button-choose button-disabled');
      var formattedPrice = labelvarentprices / 100;
      formattedPrice =  (formattedPrice.toLocaleString("en-US", {style:"currency", currency:"AUD"})).substring(1)
      $(`#add-patch-text`).text(`ADD TO ORDER - ${formattedPrice}`)

     var data = JSON.parse(datacolor);
      var image = "";
    $.each(data, function(index, item) {
        if (item.color_name === color) {
            image = item.image;
              return false; // Exit the loop early
        }
    });
         if(image){
           $('#pwzrswiper-wrapper #pwzrswiper-slide-0 img').attr('src',image);
         } else {
           let defaultimage= $('.rio-hide-scrollbar .PwzrGrid-root:first img').attr('src');

            $('#pwzrswiper-wrapper #pwzrswiper-slide-0 img').attr('src',defaultimage.split('?')[0]);
         }
   
       
  });
  $('#product-buy-button').click(function(event) {
  
    event.preventDefault(); // Prevent the form from submitting traditionally

   
    // Serialize form data
    var serializedFormData = $("#{{form_id}}").serialize();
    // Parse the serialized data to extract required information
    var params = new URLSearchParams(serializedFormData);

    var datavareintids = $('.relative-cards').attr('data-vareintids')

    // Initialize an array to hold all form data entries
    var itemsToAdd = [];

    // Extract the main product variant ID and quantity from serialized data
    // Assuming 'id' and 'quantity' are correctly named in the form
    const mainProductId = params.get('id');  // The variant ID from the form
    const quantity = parseInt(params.get('quantity')) || 1;  // Quantity with a default of 1 if not specified

    // Add main product to itemsToAdd array if it exists
    if (mainProductId) {
      itemsToAdd.push({
        id: mainProductId,
        quantity: quantity
      });
    }
    
    // Check if the D-ring should be added
    if ($addDring && typeof $matchingDringVariant !== 'undefined') {
      itemsToAdd.push({
        id: String($matchingDringVariant.id),
        quantity: 1  // Assuming quantity is always 1 for additional items
      });
    }

    // Check if the patch should be added
    
    if ($addPatch) {
       var input = document.getElementById('cl-custom-text');
      if (input.value.trim() === '') {
        input.reportValidity();
        input.focus();
        return;
      }
      var customMessage = input.value.toUpperCase();
      var phoneNumber = document.getElementById('cl-phone-number').value;

      itemsToAdd.push({
        id: datavareintids,
        quantity: 1,
        featured_image:{"alt":"Custom Labels","aspect_ratio":1.0,"height":2048,"url":"https://ezydog.com.au/cdn/shop/files/CustomLabels_black_b.png?v=1721820400","width":2048},   
        properties: {
          'Custom Message': customMessage,
          'Phone Number': phoneNumber      
        }
      });

     //  loadImageAndDraw(downloadImage);
      
    }
   console.log(JSON.stringify(itemsToAdd));
    // Only proceed if there are items to add
    if (itemsToAdd.length > 0) {
      addToCart(itemsToAdd);
    }
  });
  
    var size = $('.variant-picker__option-values [name="option2"]:checked').val();
    handleProductSizeChange()
  
});

// Unified function to handle adding multiple items to the Shopify cart
function addToCart(items) {
  $.ajax({
    type: 'POST',
    url: '/cart/add.js',
    data: JSON.stringify({ items: items }),  // Adjusted for batch addition if your Shopify version supports it
      
    contentType: 'application/json',
    success: function(response) {
      console.log('Items added to cart:', response);
      document.dispatchEvent(new CustomEvent('cart:refresh'));
      const cartDrawerElement = document.querySelector('#cart-drawer');
      if (cartDrawerElement) {
    
        cartDrawerElement.show();
        
      }
    },
    error: function(xhr, status, error) {
      console.error('Error adding items to cart:', error);
    }
  });
  
}



  
  
  function handleProductSizeChange() {    
    // Map it to the new size
    findMappedVariants()

    updateAddToCartButton()
    updateDringAddToCartButton()
  }

  function findMappedVariants(){
  
    let size = $('.variant-picker__option-values [name="option2"]:checked').val()
    let mappingObject = window.mapping.find(mapping => {
     
      return mapping.ids.includes(parseInt($productId));
    });
    {% comment %} console.log('finding mapped variant') {% endcomment %}
    if (mappingObject) {
      let mapping = mappingObject.mapping[size]

      $matchingPatchVariant = $labelProductVariants.filter(item => 
        item.option1.toLowerCase() === $selected_patch_colour.toLowerCase() && 
        item.option2.toLowerCase() === mapping.patch.toLowerCase())[0];
      $matchingDringVariant = $dringVariants.filter(item => item.option2.toLowerCase() === mapping.d_ring.toLowerCase())[0];  
    } else {      
      $selected_patch_colour = "" 
    }
     
  }

  function updateAddToCartButton(){

    var addToCartButton = $('#upsell-patch');

    if (!$matchingPatchVariant){
      addToCartButton.prop('disabled', true);
      addToCartButton.addClass('button-choose');
      $(`#add-patch-text`).text("Choose Colour")
      return
    }
    
    if ($matchingPatchVariant && $matchingPatchVariant.available) {
      addToCartButton.prop('disabled', false);
      addToCartButton.removeClass('button-choose button-disabled');

      var formattedPrice = $matchingPatchVariant.price / 100;
      formattedPrice =  (formattedPrice.toLocaleString("en-US", {style:"currency", currency:"AUD"})).substring(1)
      $(`#add-patch-text`).text(`ADD TO ORDER - ${formattedPrice}`)
    } else {
      addToCartButton.prop('disabled', true);
      addToCartButton.addClass('button-disabled');
      $(`#add-patch-text`).text("SOLD OUT")
      
    }
  }

  function styleDringButtonSoldOut(){
    $(`#upsell-button-d-ring`).addClass('button-sold-out').removeClass("upsell-button-d-ring-remove").prop('disabled', true);
    $("#add-dring-text").text("Sold Out");
    $('.cl-color-selector input[type="checkbox"]').not(`[data-color="${$selected_patch_colour}"]`).prop('checked', false);
  }

   

  function styleDringButtonAddToCart(){
   
    $(`#upsell-button-d-ring`).removeClass("upsell-button-d-ring-remove").removeClass('button-disabled button-sold-out').attr('data-role', 'add');
    var formattedPrice = $matchingDringVariant.price / 100;
    formattedPrice =  (formattedPrice.toLocaleString("en-US", {style:"currency", currency:"AUD"})).substring(1)
    $(`#add-dring-text`).text(`Add UpFront Dring - ${formattedPrice}`)
  }

  function styleDringButtonRemoveFromCart(){
    $(`#add-dring-text`).text("Remove UpFront D-Ring");
    $(`#upsell-button-d-ring`).addClass("upsell-button-d-ring-remove").removeClass('button-disabled button-sold-out').attr('data-role', 'update');
  }

  function updateDringAddToCartButton(){
    
    if($matchingDringVariant && $matchingDringVariant.available){
      
      $('#upsell-button-d-ring').prop('disabled', false).removeClass('button-disabled upsell-button-d-ring-remove');
       $('#upsell-button-d-ring_new, #upsell-button-d-ring_new1').prop('disabled', false).removeClass('button-disabled upsell-button-d-ring-remove');
        
        if ($addDring) {
          styleDringButtonRemoveFromCart();
        } else {
          styleDringButtonAddToCart();
        }
    } 

    if(!$matchingDringVariant) {
      $('#upsell-button-d-ring').hide()
          $('#upsell-button-d-ring_new, #upsell-button-d-ring_new1').hide()
    }

    if($matchingDringVariant && !$matchingDringVariant.available){
      styleDringButtonSoldOut()
      
    }

  }
  
  $('.variant-picker__option-values [name="option2"]').change(function() {
    handleProductSizeChange(this.value)
  
  });

  let isBeddingProduct = window.bedding_mapping.includes(parseInt("{{product.id}}"));

  if (isBeddingProduct) {
    $('.cl-color-checkbox').each(function() {
      if ($(this).data('color').toLowerCase() !== 'black') {
        // Hide the parent container of the checkbox to hide the entire color option
        $(this).closest('div').hide();
      }
    });
    $('.cl-color-checkbox').first().click();
  }


  const isFormfitProduct = window.formfit_mapping.includes(parseInt("{{product.id}}"));

  if (isFormfitProduct) {
    $('.cl-color-checkbox').each(function() {
      if ($(this).data('color').toLowerCase() !== 'formfit grey') {
        $(this).closest('div').hide();
      }
    });
    $('.cl-color-checkbox[id*="Formfit"]').click();
    $(`.inner-label-img`).addClass('d-none')
    $(`#inner-label-img-formfit-grey`).removeClass('d-none')
    $(".patch-text-overlay").addClass("patch-text-overlay-form-fit");
    
  } else {
    $('.cl-color-checkbox').each(function() {
      if ($(this).data('color').toLowerCase() === 'formfit grey') {
        $(this).closest('div').hide();
      }
    });
  }


  function addPatchToOrder(){
     const $productBuyButton = $('#product-buy-button');
    var $upsellpatch = $('#upsell-patch');

    $addPatch = !$addPatch;

    if ($addPatch == true){ 
        var input = document.getElementById('cl-custom-text');
   
     
      if (input.value.trim() === '') {
      input.reportValidity();
        input.focus();
        $addPatch = false;
         exits;
      }  else {
      $(`#add-patch-text`).text(`REMOVE FROM ORDER`)
      $("#upsell-patch").addClass("upsell-patch-added")
      $('.tooltiptext').remove();
       $productBuyButton.removeAttr('disabled');
           $('#popupclose').trigger('click'); 
      }
    } else{    
 
     if ($('#upsell-patch').hasClass("upsell-patch-added")) {
       rebackcustomlabe();
      }
       let text= $(`#add-patch-text`).text();
         $("#upsell-patch").removeClass("upsell-patch-added")
         let formatedproces =$('.cprices').text();
      $(`#add-patch-text`).text(`ADD TO ORDER - ${formatedproces}`)
      $productBuyButton.attr('disabled', 'disabled');
       // if ($('.tooltiptext').length === 0) {
       //  $('#product-buy-button').before('<span class="tooltiptext">Please cancel or finish custom label process <br> <a class="toltipanchor">Finish</a></span>');
       // }

   
      
    }
  }

  

 

  function updateAddToCartButton(){
    var addToCartButton = $('#upsell-patch');

    if (!$matchingPatchVariant){
      addToCartButton.prop('disabled', true);
      addToCartButton.addClass('button-choose');
      $(`#add-patch-text`).text("Choose Colour")
      return
    }
    
    if ($matchingPatchVariant && $matchingPatchVariant.available) {
      addToCartButton.prop('disabled', false);
      addToCartButton.removeClass('button-choose button-disabled');
      if($addPatch == false){
        var formattedPrice = $matchingPatchVariant.price / 100;
        formattedPrice =  (formattedPrice.toLocaleString("en-US", {style:"currency", currency:"AUD"})).substring(1)
        $(`#add-patch-text`).text(`ADD TO ORDER - ${formattedPrice}`)        
      }

    } else {
      addToCartButton.prop('disabled', true);
      addToCartButton.addClass('button-disabled');
      $(`#add-patch-text`).text("SOLD OUT")
      
    }
  }
  
  
  async function triggerDringClick(el){
    $addDring = !$addDring
    updateDringAddToCartButton()
  }
  

  $('#cl-custom-text').on('input', function() {
    var text = $(this).val();
    $('#label-text-overlay').text(text);
  });

  $('#cl-phone-number').on('input', function() {
    var text = $(this).val();

  
    if (text.length > 12) {
        text = text.substring(0, 12);
        $(this).val(text);
    }

    let chars = text.split('');

    if (chars.length > 3) {
      chars.splice(4, 0, ' ');
    }
    if (chars.length > 7) {
      chars.splice(8, 0, ' ');
    }

    let formatted = chars.join(''); 
    
    $('#label-phone-overlay').text(formatted);
    if (text === '') {
        $('.patch-text-overlay').removeClass('with-phone');
    } else {
        $('.patch-text-overlay').addClass('with-phone');
    }
});

  
  // DRINGS

</script>

<style>
  .upsell-image-dring{ height: 30px !important; position: unset !important; }
  .button-sold-out{ pointer-events: none; background: #FFF !important; color: #EA2D24; border: 1px solid #DBDBDB !important; }
  .button-sold-out span{ color: #EA2D24 !important;}
  #upsell-button-d-ring img{ position: absolute; }
  .upsell-button-d-ring-remove{ background: rgba(0, 0, 0, 0.15) !important; color: #EA2D24 !important; }
  #upsell-button-d-ring.button-disabled{ color: #EA2D24 !important; background: #FFF !important; border: 1px solid  rgba(0, 0, 0, 0.15);  }

  #upsell-button-d-ring.button-disabled #add-dring-text{ color: #EA2D24 !important; }

  .upsell-patch-added{
    border: 1px rgba(0, 0, 0, 0.15) none !important;
    background: rgba(0, 0, 0, 0.15) !important;
    color: #333 !important;
  }
  
  #cl-custom-text,  #cl-phone-number{ border-radius: 5px; border: 1px solid #C4C4C4; }
  .patch-text-overlay{ text-transform: uppercase; }

  #custom-label-form-{{ product.id }} input{
    width: 100%;
    border-radius: 5px;
    height: 40px;
    padding: 0 10px;
  }

  .upsell-wrapper{ display: flex; flex-direction: column;  gap: 1em; }

  .upsell-inner-wrapper{
    padding: 0 22px 30px 22px;
    margin-block-start: 10px;
  }

  .accordion-label-customise{
    border-block-width: 0;
    background: rgba(0, 0, 0, 0.03);
    border-radius: 10px;
  }

  .accordion-label-customise > summary{
    height: unset;    
    padding: 10px 22px;
  }

  .upsell-button-d-ring {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    padding: 20px;
    border-radius: 10px;
    background: #FAF9F7;
  }

  .upsell-image  {
    align-self: flex-start;
    height: 23px;
  }

  .upsell-button-d-ring span {
    color: #333;
    align-self: center;
    width: 100%;
    text-align: center;
    font-size: 20px;
  }

  #upsell-patch{ margin-top: 32px;  }

  .patch-text-overlay{
    {% comment %} font-family: "Helvetica-Neue"; {% endcomment %}
    position: absolute;
    color: #fff;
    font-size: ;
    inset: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 5px;
  }
 
  
  .patch-text-overlay.with-phone #label-text-overlay, .patch-text-overlay.with-phone #label-phone-overlay{ line-height: 1; text-transform: uppercase; }
  @media screen and (max-width: 1000px){
    .patch-text-overlay #label-text-overlay, .patch-text-overlay #label-phone-overlay{ font-size: 11vw; }

    .patch-text-overlay.with-phone #label-text-overlay, .patch-text-overlay.with-phone #label-phone-overlay{ font-size: 5.5vw; }
  }

  @media screen and (min-width: 1000px) and (max-width: 1590px ){
    .patch-text-overlay #label-text-overlay, .patch-text-overlay #label-phone-overlay{ font-size: 3.4vw; }

    .patch-text-overlay.with-phone #label-text-overlay, .patch-text-overlay.with-phone #label-phone-overlay{ font-size: 3vw; }
  }
  
  @media screen and (min-width: 1590px){
    .patch-text-overlay #label-text-overlay, .patch-text-overlay #label-phone-overlay{ font-size: 70px; }

    .patch-text-overlay.with-phone #label-text-overlay, .patch-text-overlay.with-phone #label-phone-overlay{ font-size: 60px; }
  }



  .patch-text-overlay-form-fit { margin-top: 10px; }
  .patch-text-overlay-form-fit > #label-text-overlay { color: #fff !important; }
  .patch-text-overlay-form-fit > #label-phone-overlay { color: #c9c8c8 !important; }
  .patch-text-overlay-form-fit.with-phone #label-phone-overlay{ font-weight: normal; letter-spacing: 1px;}

  @media screen and (max-width: 1000px){
    .patch-text-overlay-form-fit #label-text-overlay, .patch-text-overlay-form-fit #label-phone-overlay{ font-size: 11vw; }

    .patch-text-overlay-form-fit.with-phone #label-text-overlay{ font-size: 5.5vw; }
    .patch-text-overlay-form-fit.with-phone #label-phone-overlay{ font-size: 3.5vw; }
  }

  @media screen and (min-width: 1000px) and (max-width: 1590px ){
    .patch-text-overlay-form-fit #label-text-overlay{ font-size: 5vw; }

    .patch-text-overlay-form-fit.with-phone #label-text-overlay{ font-size: 4vw; }
    .patch-text-overlay-form-fit.with-phone #label-phone-overlay{ font-size: 2vw; }
  }
  
  @media screen and (min-width: 1590px){
    .patch-text-overlay-form-fit #label-text-overlay{ font-size: 70px; }

    .patch-text-overlay-form-fit.with-phone #label-text-overlay{ font-size: 60px; }
    .patch-text-overlay-form-fit.with-phone #label-phone-overlay{ font-size: 40px; }
  }
  


  .cl-color-selector{ display: flex; gap: 10px; }

  
  .button-choose{ border: 1px solid: #EA2D24; background: #FFF; color: #EA2D24;  }
  .add-text-{{product.id}} { transition: opacity 0.2s ease-in-out; }

   .button-{{product.id}}{
    width: 80%; margin: auto; display: flex;
    position: relative;
  }
  
   .button-{{product.id}} > .loading-{{ product.id }}{
    position: absolute;
    inset: 0;
    margin: auto;
  }

  .loading-spinner {
    pointer-events: none;
    transition: opacity 0.2s ease-in-out; 
  }

  .loading-spinner > svg{
    position: absolute;
    inset: 0;
    margin: auto;
    max-height: 50px;
  }


  .cl-accordion-label-customise{
    border-block-width: 0;
    background: rgba(0, 0, 0, 0.03);
    border-radius: 10px;
  }

  .cl-accordion-summary{
    padding: 20px 15px;
  }
  
  .cl-product-image{
    height: 64px;
    width: auto;
    z-index: 1;
    position: relative; 
  }
  
  .cl-wrapper{ 
    display: grid;
    gap: 32px;
  }

  {% comment %} Step 1 {% endcomment %}
  .cl-step-heading{ margin-bottom: 12px; }
  .cl-product-select{ position: relative;  }
  .cl-product-image{ padding-left: 26px; }
  .cl-checkbox-container input{ visibility: hidden; }
  .cl-accordion__content{ margin-top: none !important; }
  .cl-product-select{ padding: 22px 0; }
  .cl-product-select span{ padding: 0 26px}

  .cl-checkbox-container{
    position: absolute;
    display: flex;
    justify-content: center;
    inset: 0;
    margin: auto;
    align-items: center;
  }

  .cl-product-select input[type="checkbox"]:checked + label {
    background-color: #E4E4E4;
  }

  {% comment %} MOOSE {% endcomment %}
  .cl-size-selector input[type="checkbox"]:checked + label {
    background-color: #EA2D24;
    border-color: #EA2D24;
    color: #fff;
  }
  .cl-size-selector input[type="checkbox"]:checked + label {
    background-color: #EA2D24;
    border-color: #EA2D24;
    color: #fff;
  }

{% comment %} Step 2 {% endcomment %}
  .cl-size-selector {
    display: flex;
    gap: 10px; /* Space between each size option */
  }
  
  .cl-size-selector input { display: none; }
  .size-option {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    border: 1px solid #4B4B4B;
    cursor: pointer;
    position: relative;
  }
  
  .size-option input[type="checkbox"] {
    display: none;
  }
  
  
  {% comment %} Step 3 {% endcomment %}
  .cl-text-input-wrapper input{
    width: 100%;
    border-radius: 5px;
    height: 40px;
    padding: 0 10px;
  }

  .cl-s3-text-wrapper{display: flex;
    gap: 10px;
    align-items: center;
  }

  .cl-s3-text-wrapper img{ width: 40px; height: 40px;  }


  .cl-color-wrapper{ padding-bottom: 20px; padding-top: 20px; }
  .cl-color-checkbox { display: none; }
  .color-swatch-active { outline: 1px solid #1a1a1a !important;outline-offset: 3px !important;scale: 0.9 !important;
</style>
