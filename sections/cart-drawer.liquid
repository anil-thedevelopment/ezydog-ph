<cart-drawer id="cart-drawer" class="cart-drawer drawer {% if cart.empty? %}drawer--center-body{% endif %}" initial-focus="false" handle-editor-events>
  <p class="h4 dfs-35" slot="header">{{ 'cart.general.title' | t }}</p>
 
  {%- if cart.empty? -%}
    <p class="h5 text-center">{{ 'cart.general.empty' | t }}</p>
  {%- else -%}
    {%- if settings.cart_show_free_shipping_bar -%}
      {%- render 'free-shipping-bar' -%}
    {%- endif -%}

    <!-- START: In Cart Pop up - Order or product triggered -->
    {% assign localizationsmarket = localization.market.metafields.custom.discount_varient.value %}
    {% assign meta_obj = localizationsmarket %}
    {% assign cart_price = cart.total_price | money | remove: '$' | times: 1.0 %}

    {% if meta_obj.gwp_prices_range.value %}
      {% assign proudcut_prices =  meta_obj.gwp_prices_range.value | times: 1.0 %}
    {% endif %}
    
    {% if meta_obj.enable_gwp_for_cart.value == false %}
      {% render 'in-cart-popup' %}
    {% elsif meta_obj.enable_gwp_for_cart.value == true and cart_price < proudcut_prices %}
      {% render 'in-cart-popup' %}
    {% endif %}
    <!-- End: In Cart Pop up - Order or product triggered -->
    
    <div class="cart-drawer__items">
      {%- for line_item in cart.items -%}
        {%- render 'line-item', line_item: line_item, show_quantity_selector: true -%}
      {%- endfor -%}
    </div>

    <form action="{{ routes.cart_url }}" method="POST" class="cart-drawer__footer" slot="footer">
      <input type="hidden" name="attributes[products_mobile_grid_mode]" value="">
      <input type="hidden" name="attributes[products_desktop_grid_mode]" value="">

      {%- if section.settings.show_cart_note or section.settings.show_shipping_text -%}
        <div class="v-stack gap-0.5 justify-items-start">
          {%- if section.settings.show_cart_note -%}

{% comment %}
              <div class="form form-note" style="width: 100%; margin-bottom: 2em;">
                <cart-note class="form-control">
                  {%- assign order_note = 'cart.general.order_note' | t -%}
                  {%- assign placeholder = 'cart.general.note_placeholder' | t -%}
                  {%- render 'input', label_class: "cart-note-input-label", extra_class: "cart-note-input", name: 'note', multiline: 3, label: order_note, value: cart.note, placeholder: placeholder, show_label_as_block: true -%}
                </cart-note>

                <button type="button" class="button" is="dialog-close-button">{{ 'cart.general.save_note' | t }}</button>
              </div>
<style>
  .cart-note-input{ border: 1px solid #333 !important; border-radius: 10px !important; }
  .cart-note-input-label{ font-size: 16px; font-family: Barlow-Medium; }
  .form-note .textarea{ border: 1px solid #333; border-radius: 10px; }
</style>

           {% endcomment %}  
            {%- assign cart_note_dialog_id = 'cart-note-' | append: section.id -%}
            <button class="link-faded-reverse dfs-18 mfs-18" aria-controls="{{ cart_note_dialog_id }}" style="">{{ 'cart.general.add_order_note' | t }}</button>

            <cart-note-dialog id="{{ cart_note_dialog_id }}" class="cart-drawer__order-note">
              <div class="form">
                <cart-note class="form-control">
                  {%- assign order_note = 'cart.general.order_note' | t -%}
                  {%- assign placeholder = 'cart.general.note_placeholder' | t -%}
                  {%- render 'input', name: 'note', multiline: 3, label: order_note, value: cart.note, placeholder: placeholder, show_label_as_block: true -%}
                </cart-note>

                <button type="button" class="button" is="dialog-close-button">{{ 'cart.general.save_note' | t }}</button>
              </div>
            </cart-note-dialog>
           
          {%- endif -%}

          {%- if section.settings.show_shipping_text -%}
            <p class="text-subdued">{{ 'cart.general.taxes_and_shipping_at_checkout' | t }}</p>
          {%- endif -%}
        </div>
      {%- endif -%}

      {% for discount_application in cart.cart_level_discount_applications %}
        <div class="h-stack justify-start gap-4">
          <span class="discount-badge text-xs">{%- render 'icon' with 'discount', width: 12 -%} {{- discount_application.title -}}</span>
          <span class="text-subdued">-{{ discount_application.total_allocated_amount | money }}</span>
        </div>
      {% endfor %}

      <div class="button-group ">
        {%- if section.settings.show_view_cart_button or section.settings.show_checkout_button == false -%}
          {%- assign view_cart = 'cart.general.view_cart' | t -%}
          {%- render 'button', href: routes.cart_url, content: view_cart, stretch: true -%}
        {%- endif -%}

        {%- if section.settings.show_checkout_button -%}
          {%- capture checkout_button -%}
            {{- 'cart.general.checkout' | t -}}

            {%- if section.settings.show_price_in_checkout_button -%}
              <span class="cart-drawer__button-price">{{- cart.total_price | money -}}</span>
            {%- endif -%}
          {%- endcapture -%}

          {%- render 'button', type: 'submit', content: checkout_button, name: 'checkout', stretch: true -%}
        {%- endif -%}
      </div>
    </form>
  {%- endif -%}

     {%- render 'free-cart_product' -%}

   <!-- START: In Cart Pop up - Order or product triggered -->
    {% if meta_obj.enable_gwp_for_cart.value == true and cart_price > proudcut_prices %}
      {% render 'in-cart-popup' %}
    {% endif %}
    <!-- END: In Cart Pop up - Order or product triggered -->
  
</cart-drawer>

{% schema %}
{
  "name": "t:sections.cart_drawer.name",
  "class": "shopify-section--cart-drawer",
  "tag": "section",
  "settings": [
    {
      "type": "paragraph",
      "content": "t:sections.cart_drawer.page_info"
    },
    {
      "type": "paragraph",
      "content": "t:sections.cart_drawer.free_shipping_bar_info"
    },
    {
      "type": "checkbox",
      "id": "show_cart_note",
      "label": "t:sections.cart_drawer.show_cart_note",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_shipping_text",
      "label": "t:sections.cart_drawer.show_shipping_text",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_view_cart_button",
      "label": "t:sections.cart_drawer.show_view_cart_button",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "show_checkout_button",
      "label": "t:sections.cart_drawer.show_checkout_button",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_price_in_checkout_button",
      "label": "t:sections.cart_drawer.show_price_in_checkout_button",
      "default": true
    }
  ]
}
{% endschema %}

<!-- START: Threshold progress bar + In Cart Pop up -->
<div id="cart-total" data-total="0"></div>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    function initCartObserver() {
      const cartDrawer = document.querySelector('#cart-drawer');
      const cartTotalElement = document.querySelector("#cart-total");

      if (cartDrawer && cartTotalElement) {  
        function fetchAndInitializeCartPopup() {
          fetch('/cart.js')
          .then(response => response.json())
          .then(cart => {                        
          const cartTotal = cart.total_price / 100;
          cartTotalElement.setAttribute("data-total", cartTotal);
          if(document.querySelectorAll("line-item.line-item").length !== 0){
            if(cart.items.length === document.querySelectorAll("line-item.line-item").length){
              // console.log('cart not empty');
              document.querySelectorAll(".cart-popup .popup").forEach(function (popup) {
                const triggerAmount = parseFloat(popup.getAttribute("data-trigger-amount"));
                if (!isNaN(triggerAmount) && triggerAmount > 0) {
                  const progress = Math.min((cartTotal / triggerAmount) * 100, 100);
                  const progressBar = popup.querySelector(".progress-bar");

                  const remainingAmount = Math.floor(triggerAmount - cartTotal);
                  const spendMoreText = popup.querySelector(".spend-more-text");
                  const freeProdButton = popup.querySelector(".free-prod-button");

                  // Reset width temporarily to force a refresh and prevent flicker
                  progressBar.style.transition = "none";
                  progressBar.style.width = "0";
                  setTimeout(() => { 
                    progressBar.style.transition = "";
                    progressBar.style.width = progress + "%";
                  }, 10);

                  if (remainingAmount <= 0) {
                    progressBar.style.backgroundColor = "green";
                    spendMoreText.textContent = "UNLOCKED!";
                    spendMoreText.style.color = "green";
                    freeProdButton.removeAttribute('disabled');
                  } else {
                    spendMoreText.textContent = `Spend $${remainingAmount} more`;
                    spendMoreText.style.color = "";
                    freeProdButton.setAttribute('disabled',true);
                  }
                }
              });
            } else {
              fetchAndInitializeCartPopup();
            }
          }
          })
          .catch(error => console.error("Error fetching cart data:", error));
          }

          const cartItemsContainer = cartDrawer.querySelector(".cart-drawer__items");
          const itemObserver = new MutationObserver(() => {
            setTimeout(fetchAndInitializeCartPopup, 500);
          });

          if (cartItemsContainer) {
          itemObserver.observe(cartItemsContainer, {
            childList: true,
            subtree: true,
          });
        }

        const drawerObserver = new MutationObserver((mutations) => {
          mutations.forEach((mutation) => {
            if (mutation.attributeName === "open" && cartDrawer.hasAttribute("open")) {
              setTimeout(fetchAndInitializeCartPopup, 600);
            }
          });
        });

        drawerObserver.observe(cartDrawer, { attributes: true, attributeFilter: ["open"] });

        const handleQuantityChange = () => setTimeout(fetchAndInitializeCartPopup, 750);

        // Separate handling for input changes in quantity to prevent flickering
        cartDrawer.addEventListener("click", (event) => {
          if (event.target.closest(".quantity-selector__button") || event.target.closest("#addFreeProductButton") || event.target.classList.contains("link")) {
            handleQuantityChange();
          }
        });

        cartDrawer.addEventListener("input", (event) => {
          if (event.target.classList.contains("quantity-selector__input")) {
            setTimeout(() => {
              fetchAndInitializeCartPopup();
            }, 1250);
          }
        });
      } else {
        console.log('Cart drawer or total element not found');
      }
    }

    function setupObserver() {  
      if (document.querySelector('#cart-drawer')) {
        initCartObserver(); 
      } else {
        requestAnimationFrame(setupObserver);
      }
    }

    setupObserver();
  });     
</script>
<!-- END: Threshold progress bar + In Cart Pop up -->